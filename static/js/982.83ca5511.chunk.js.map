{"version":3,"file":"static/js/982.83ca5511.chunk.js","mappings":"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","sources":["Layouts/Header/Components/Elements/Notifications.js"],"sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport queryString from 'query-string';\r\nimport { Tab, Nav } from 'react-bootstrap';\r\nimport moment from 'moment';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport { Link } from 'react-router-dom';\r\nimport { baseUrl } from '../../../../Assets/AssetsHelper';\r\nimport { notificationUpdateStatus } from '../../../../Services/Actions/homeActions'\r\nimport { getLoadNotify } from '../../../../Services/Actions/loginActions'\r\nimport { SafariStatus } from '../../../../Services/Utils/utils'\r\n\r\nclass Notifications extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { notifications: props.notificationList }\r\n    }\r\n    updateStatus = (postId, status) => event => {\r\n        var self = this;\r\n        notificationUpdateStatus(postId, status).then((response) => {\r\n            self.props.getLoadNotify()\r\n        })\r\n        this.onRequest()\r\n    }\r\n    onRequest = () => {\r\n        const parsed = queryString.parse(window.location.search);\r\n        if ((parsed && Object.keys(parsed).length > 0) || String(window.location.href).includes(\"assets\")) {\r\n            const channel = SafariStatus ? window : new BroadcastChannel('connect');\r\n            if (SafariStatus) window.opener.postMessage(JSON.stringify({ type: 'assets-redirect' })); else channel.postMessage(JSON.stringify({ type: 'assets-redirect' }));\r\n        }\r\n    }\r\n    onClickToRedirect = event => this.onRequest()\r\n\r\n    render() {\r\n        const { notifications } = this.state;\r\n\r\n        return <div className=\"w-100\">\r\n            <Tab.Container id=\"notifications_tab_panel\" defaultActiveKey=\"all-notifications\">\r\n                <div className=\"d-flex align-items-center justify-content-between px-3 pt-2 border-bottom\">\r\n                    <Nav variant=\"underline\" className=\"nav\">\r\n                        <Nav.Item className=\"\">\r\n                            <Nav.Link className=\"me-3 px-0 fw-medium\" eventKey=\"all-notifications\">All</Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item className=\"\">\r\n                            <Nav.Link className=\"px-0 fw-medium\" eventKey=\"unread-notifications\">Unread</Nav.Link>\r\n                        </Nav.Item>\r\n                    </Nav>\r\n                    <div>\r\n                        <button type=\"button\" className=\"btn btn-link btn-sm px-0 h-auto fw-bold text-decoration-none btn-active-color-primary\">Mark all as read</button>\r\n                    </div>\r\n                </div>\r\n                <PerfectScrollbar options={{ wheelPropagation: false }}>\r\n                    {notifications && Object.keys(notifications).length > 0 ? <Tab.Content>\r\n                        <Tab.Pane eventKey=\"all-notifications\" className=\"pb-3 min-h-100\">\r\n                            {\r\n                                notifications && Object.keys(notifications).map((iNot, index) => {\r\n                                    return <Fragment key={index}><div className=\"d-flex align-items-center justify-content-between px-3 py-1\" >\r\n                                        <span className=\"text-gray-800 fw-bold\">{iNot}</span>\r\n                                        <span className=\"bg-primary badge rounded-5 min-w-30 text-light-alt d-none\">{(notifications[iNot] && notifications[iNot].length > 0) ? notifications[iNot].length : 0}</span>\r\n                                    </div>\r\n                                        {notifications[iNot] && notifications[iNot].length > 0 ? <div className=\"\">\r\n\r\n                                            {\r\n                                                notifications[iNot].map((imNot) => {\r\n                                                    return <Link to={imNot.url ? imNot.url : `#`} key={imNot.id} className={`px-3 d-flex align-items-start border-bottom notification-item text-decoration-none ${imNot.status == 0 ? `bg-light` : ``}`} onClick={this.onClickToRedirect}>\r\n                                                        <div className=\"symbol symbol-38 rounded-1 overflow-hidden me-2 bg-light p-2\">\r\n                                                            <img alt=\"Pic\" src={baseUrl(`media/icons/social-icon-id/${imNot.message.photo}`)} height=\"40\" width=\"40\" />\r\n                                                        </div>\r\n                                                        <div className=\"d-flex align-items-start flex-column flex-grow-1\">\r\n                                                            <div className=\"d-flex algin-items-center justify-content-between w-100\">\r\n                                                                <span className=\"text-hover-primary text-gray-800 fw-bold text-decoration-none me-2\">{imNot.message.subject}</span>\r\n                                                                <span className=\"text-gray-500 fs-9\">{moment(new Date(imNot.message.time * 1000)).format(\"hh:mma\")}</span>\r\n                                                            </div>\r\n                                                            <div className=\"d-flex algin-items-start\">\r\n                                                                <span className=\"text-gray-600 fs-9\">\r\n                                                                    {imNot.message.text}\r\n                                                                </span>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </Link>\r\n\r\n                                                })\r\n                                            }\r\n\r\n                                        </div> : index == 0 ?\r\n                                            <div className=\"block-center\" style={{ height: 350 }}>\r\n                                                <p className=\"mb-0 text-muted\">No Notifications</p>\r\n                                            </div>\r\n                                            : null}\r\n                                    </Fragment>\r\n\r\n                                })\r\n                            }\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"unread-notifications\" className=\"pb-3 min-h-100\">\r\n                            {\r\n                                notifications && Object.keys(notifications).map((iNot, index) => {\r\n                                    return notifications[iNot] && notifications[iNot].length > 0 && notifications[iNot].filter((a) => a.status == 0).length > 0 ? <Fragment key={index}><div className=\"d-flex align-items-center justify-content-between px-3 py-1\">\r\n                                        <span className=\"text-gray-800 fw-bold\">{iNot}</span>\r\n                                        <span className=\"bg-primary badge rounded-5 min-w-30 text-light-alt d-none\">{notifications[iNot] && notifications[iNot].length > 0 && notifications[iNot].filter((a) => a.status == 0).length > 0 ? notifications[iNot].filter((a) => a.status == 0).length : 0}</span>\r\n                                    </div>\r\n                                        {notifications[iNot] && notifications[iNot].length > 0 ?\r\n                                            <div className=\"\">\r\n                                                {notifications[iNot].map((imNot) => {\r\n                                                    return imNot.status == 0 ? <Link to={imNot.url ? imNot.url : `#`} key={imNot.id} className=\"px-3 d-flex align-items-start border-bottom notification-item bg-light text-decoration-none\" onClick={this.updateStatus(imNot.id, 1)}>\r\n                                                        <div className=\"symbol symbol-38 rounded-1 overflow-hidden me-2 bg-light p-2\">\r\n                                                            <img alt=\"Pic\" src={baseUrl(`media/icons/social-icon-id/${imNot.message.photo}`)} height=\"40\" width=\"40\" />\r\n                                                        </div>\r\n                                                        <div className=\"d-flex align-items-start flex-column flex-grow-1\">\r\n                                                            <div className=\"d-flex algin-items-center justify-content-between w-100\">\r\n                                                                <span className=\"text-hover-primary text-gray-800 fw-bold text-decoration-none me-2\">{imNot.message.subject}</span>\r\n                                                                <span className=\"text-gray-500 fs-9\">{moment(new Date(imNot.message.time * 1000)).format(\"hh:mma\")}</span>\r\n                                                            </div>\r\n                                                            <div className=\"d-flex algin-items-start\">\r\n                                                                <span className=\"text-gray-600 fs-9\">\r\n                                                                    {imNot.message.text}\r\n                                                                </span>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </Link> : null\r\n\r\n                                                })}\r\n                                            </div>\r\n                                            : null}\r\n                                    </Fragment> : index == 0 ?\r\n                                        <div className=\"block-center\" style={{ height: 350 }}>\r\n                                            <p className=\"mb-0 text-muted\">No Unread Notifications</p>\r\n                                        </div>\r\n                                        : null\r\n\r\n\r\n                                })\r\n                            }\r\n                        </Tab.Pane>\r\n                    </Tab.Content> : <div className=\"block-center\" style={{ height: 150 }}>\r\n                        <p className=\"mb-0 text-muted\">No Notifications</p>\r\n                    </div>}\r\n                </PerfectScrollbar>\r\n            </Tab.Container>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n        notificationList: state.notifications.notificationList\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n\r\n        getLoadNotify: () => dispatch(getLoadNotify())\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Notifications);"],"names":["Notifications","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","updateStatus","postId","status","event","self","_assertThisInitialized","notificationUpdateStatus","then","response","getLoadNotify","onRequest","parsed","queryString","window","location","search","Object","keys","length","String","href","includes","channel","SafariStatus","BroadcastChannel","opener","postMessage","JSON","stringify","type","onClickToRedirect","state","notifications","notificationList","_createClass","key","value","_this2","this","_jsx","className","children","_jsxs","Tab","id","defaultActiveKey","Nav","variant","eventKey","PerfectScrollbar","options","wheelPropagation","map","iNot","index","Fragment","imNot","Link","to","url","concat","onClick","alt","src","baseUrl","message","photo","height","width","subject","moment","Date","time","format","text","style","filter","a","Component","connect","dispatch"],"sourceRoot":""}