{"version":3,"file":"static/js/9730.4a799e13.chunk.js","mappings":"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","sources":["Layouts/Main/MyAssets/AddTagModal/AddTagModal.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { Modal } from 'react-bootstrap';\nimport CreatableSelect from 'react-select/creatable';\nimport { postAddTag } from '../../../../Services/Actions/tagsActions'\nimport { AddTagAll, loadAssetsDataWithDispatch } from '../../../../Services/Actions/assetsActions'\n\n\nclass AddTagModal extends Component {\n    constructor(props) {\n        super(props);\n    }\n    state = {\n        tagString: [],\n        newTag: \"\",\n        listTags: [],\n        selectedOption: null,\n        isLoading: false\n    };\n    addTagValue = (value) => {\n\n    }\n\n    onClickToRemoveTag = (index) => event => {\n        let { tagString } = this.state;\n        tagString.splice(index, 1)\n        this.setState({ tagString })\n\n    }\n    handleClose = () => {\n        this.props.addTagCallback(false)\n    };\n    componentWillMount() {\n        const { tagList } = this.props\n        if (tagList && tagList.length > 0) {\n            var listTags = []\n            tagList.map((item) => {\n                listTags.push({ value: item, label: item })\n            })\n            this.setState({ listTags })\n\n\n        }\n\n    }\n\n    componentDidMount() {\n        const { modalAssetData } = this.props\n        if (modalAssetData && Object.keys(modalAssetData).length > 0) {\n            if (modalAssetData.tags && String(modalAssetData.tags).length > 0) this.setState({ tagString: String(modalAssetData.tags).split(\",\") })\n        }\n    }\n\n    onClickNewAddTag = event => {\n        const { newTag, tagString } = this.state;\n        const { modalAssetData } = this.props\n        if (newTag && String(newTag).length >= 3) {\n            tagString.push(newTag)\n            this.setState({ tagString, newTag: \"\", selectedOption: null })\n        }\n        else {\n\n        }\n    }\n\n    addNewTag = event => this.setState({ newTag: event.target.value })\n\n    onClickToSave = event => {\n        const { tagString, isLoading } = this.state;\n        const { modalAssetData, addTagShowModal } = this.props;\n        if (tagString && tagString.length > 0) {\n            if (addTagShowModal && modalAssetData == null) {\n                this.setState({ isLoading: true })\n                this.props.AddTagAll(tagString.join(\",\"), () => {\n                    this.props.addTagCallback(false)\n                    this.setState({ isLoading: false })\n                })\n            }\n            else {\n                this.setState({ isLoading: true })\n                this.props.postAddTag({\n                    \"postId\": String(modalAssetData.id),\n                    \"tags\": tagString.join(\",\")\n                }, () => {\n                    this.setState({ isLoading: false })\n                    this.props.loadAssetsDataWithDispatch()\n                })\n            }\n\n        }\n\n    }\n\n    setNewTags = (selectedOption) => {\n\n        if (selectedOption && selectedOption.value) this.setState({ newTag: selectedOption.value, selectedOption })\n        else this.setState({ newTag: \"\", selectedOption: null })\n\n\n    };\n    render() {\n        const { addTagShowModal, modalAssetData } = this.props\n        const { tagString, newTag, listTags, selectedOption, isLoading } = this.state\n\n        const imageStyle = {\n            paddingBottom: '120%', width: '100%'\n        };\n        const tagsArrayFun = () => {\n            const tagItem = tagString.map((tag, removeIndex) =>\n                <div key={tag.toString()} className=\"badge bg-secondary text-gray-800 rounded-pill border me-2 mb-2\">\n                    <span className=\"text-break\" style={{ whiteSpace: 'normal' }}>{tag}</span>\n                    <button className=\"btn btn-sm p-0 ms-1\" onClick={this.onClickToRemoveTag(removeIndex)}>\n                        <i className=\"ri-close-line icon-7\"></i>\n                    </button>\n                </div>\n            );\n            return tagItem;\n        }\n        const status = modalAssetData && Object.keys(modalAssetData).length > 0 ? true : false\n\n        return addTagShowModal ? <Modal show={addTagShowModal} onHide={this.handleClose}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        >\n            <Modal.Header closeButton>\n                <Modal.Title>Add Tag</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div className=\"mx-xl-4 px-2 px-lg-4 mx-0 pt-4\">\n                    <div className=\"row\">\n                        {status ? <div className=\"col-lg-5\">\n                            <div className=\"card-body d-flex flex-column mb-3\">\n                                <div className=\"d-flex align-items-center cursor-pointer\">\n                                    <div className=\"position-relative rounded-1 bg-light overflow-hidden w-100\" style={imageStyle}>\n                                        <img className=\"object-center-cover position-absolute\" loading=\"lazy\" src={modalAssetData.postFile} height={500} width={300} alt={'suit'} />\n                                    </div>\n                                </div>\n                            </div>\n                        </div> : null}\n                        <div className={`col-lg-${status ? `7` : `12`}`}>\n                            <div className=\"mb-3 mb-xl-4\">\n                                <label className=\"text-muted fw-semibold mb-2\">Add Tag</label>\n                                <div className=\"d-flex align-items-center w-100\">\n                                    <div className=\"position-relative d-flex flex-grow-1 flex-column pe-2\">\n                                        <CreatableSelect isClearable options={listTags} onChange={this.setNewTags} value={selectedOption} />\n                                    </div>\n                                    <button type=\"button\" className=\"btn btn-primary\" onClick={this.onClickNewAddTag}>Add</button>\n                                </div>\n                            </div>\n                            <div className=\"mb-3 mb-xl-4\">\n                                <div style={{ minHeight: 220 }}>\n                                    <div className=\"tags-group d-flex align-items-center flex-wrap\">\n                                        {tagsArrayFun()}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"d-flex alert alert-info\">\n                        <div className=\"d-flex flex-column flex-stack flex-grow-1\">\n                            <p className=\"mb-0 text-gray-800\">Tags will help you improve content filtering.</p>\n                        </div>\n                    </div>\n                </div>\n            </Modal.Body>\n            <Modal.Footer className=\"p-3\">\n                <div className=\"mx-xl-4 px-2 px-lg-4 mx-0\">\n                    <button type=\"button\" className=\"btn btn-secondary btn-sm btn-min-w me-3\" onClick={this.handleClose}>Cancel</button>\n                    <button type=\"button\" className={`btn btn-primary btn-sm btn-min-w ${isLoading ? `spinner` : ``}`} onClick={this.onClickToSave}>Save</button>\n                </div>\n            </Modal.Footer>\n        </Modal> : null\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        tagList: state.tags.tagList\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        postAddTag: (data, callback) => dispatch(postAddTag(data, callback)),\n        AddTagAll: (data, callback) => dispatch(AddTagAll(data, callback)),\n        loadAssetsDataWithDispatch: () => dispatch(loadAssetsDataWithDispatch()),\n\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTagModal);\n"],"names":["AddTagModal","props","state","tagString","newTag","listTags","selectedOption","isLoading","addTagValue","value","onClickToRemoveTag","index","event","splice","setState","handleClose","addTagCallback","onClickNewAddTag","modalAssetData","String","length","push","addNewTag","target","onClickToSave","addTagShowModal","AddTagAll","join","postAddTag","id","loadAssetsDataWithDispatch","setNewTags","tagList","this","map","item","label","Object","keys","tags","split","status","show","onHide","size","centered","closeButton","className","style","paddingBottom","width","loading","src","postFile","height","alt","isClearable","options","onChange","type","onClick","minHeight","tag","removeIndex","whiteSpace","toString","Component","connect","dispatch","data","callback"],"sourceRoot":""}