{"version":3,"file":"static/js/9977.207d3a95.chunk.js","mappings":"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","sources":["Layouts/Main/MyAssets/AddAssetsModal/AddAssetsModal.js"],"sourcesContent":["import React, { Component, Suspense } from 'react';\r\nimport $ from 'jquery'\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport Swal from 'sweetalert2';\r\nimport { getAllConnectedAccounts, getAllNetworks } from '../../../../Services/Actions/addFeedAction';\r\nimport { GET_ALL_NETWORKS } from '../../../../Services/Constants/constants';\r\nimport Uppy from \"@uppy/core\";\r\nimport Transloadit from \"@uppy/transloadit\";\r\nimport GoogleDrive from \"@uppy/google-drive\";\r\nimport Instagram from \"@uppy/instagram\";\r\nimport Url from \"@uppy/url\";\r\nimport Webcam from \"@uppy/webcam\";\r\n//import PerfectScrollbar from 'react-perfect-scrollbar'\r\n\r\nconst UploadedAssets = React.lazy(() => import('./Compontnets/UploadedAssets'));\r\n\r\nconst UploadAssets = React.lazy(() => import('./Compontnets/UploadAssets'));\r\n\r\n\r\nconst uppyKey = '0701d3d7f8d94e92a65a9cba388b1d96';\r\nconst uppyBucket = 'cloud.taggbox.com';\r\nconst uppyAwsKey = '47ABVORKG52UYE1KB28S';\r\nconst uppyAwsSecret = 'pcaTfeokaz28geAAns08H3yaGbOVz6ILgTptu19v';\r\n\r\n\r\nconst companionUrl = 'https://app.taggbox.com';\r\n\r\nconst uppyPostEdit = new Uppy({\r\n    id: \"editA\",\r\n    debug: true,\r\n    autoProceed: true,\r\n    restrictions: {\r\n        maxFileSize: 5000000,\r\n        maxNumberOfFiles: 100,\r\n        minNumberOfFiles: 1,\r\n        allowedFileTypes: [\"image/*\"],\r\n    },\r\n});\r\n\r\nuppyPostEdit.use(Transloadit, {\r\n    target: \"#a\",\r\n    params: {\r\n        auth: {\r\n            key: uppyKey,\r\n        },\r\n        steps: {\r\n            resize: {\r\n                robot: \"/image/resize\",\r\n                width: 500,\r\n                resize_strategy: \"fit\",\r\n                background: \"none\",\r\n            },\r\n            store: {\r\n                robot: \"/wasabi/store\",\r\n                bucket_region: \"us-west-1\",\r\n                bucket: uppyBucket,\r\n                key: uppyAwsKey,\r\n                secret: uppyAwsSecret,\r\n                path: 'onsiteupload/images/${file.id}'\r\n            },\r\n        },\r\n    },\r\n    waitForEncoding: true,\r\n});\r\nuppyPostEdit.use(Instagram, {\r\n    target: Uppy.Dashboard,\r\n    companionUrl: companionUrl,\r\n});\r\nuppyPostEdit.use(GoogleDrive, {\r\n    target: Uppy.Dashboard,\r\n    companionUrl: companionUrl,\r\n});\r\nuppyPostEdit.use(Url, { target: Uppy.Dashboard, companionUrl: companionUrl });\r\nuppyPostEdit.use(Webcam, {\r\n    target: Uppy.Dashboard,\r\n    companionUrl: companionUrl,\r\n});\r\n\r\nclass AddAssetsModal extends Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n    state = {\r\n        collection: null,\r\n        showModalType: 'uploadAssets', isUploaded: false, uploadedData: [], selected: 0, checkAll: false,\r\n        captionStatus: false,\r\n        captionText: \"\",\r\n        tagsStatus: false,\r\n        tagstext: \"\",\r\n        copyrightStatus: false,\r\n        copyrightValue: false,\r\n        collectionError: false,\r\n        updateRequest: false,\r\n        isUpdate: false\r\n    };\r\n\r\n    updateStatusC = event => {\r\n        const { uploadedData, captionText } = this.state;\r\n        uploadedData.map((item) => {\r\n            if (item.checked) {\r\n                if (event.target.checked) item.caption = captionText\r\n                else item.caption = item.caption\r\n            }\r\n            else {\r\n                item.caption = item.caption\r\n            }\r\n        })\r\n\r\n        this.setState({\r\n            captionStatus: event.target.checked, uploadedData\r\n        })\r\n    }\r\n    updateStatusTag = event => {\r\n        const { uploadedData, tagstext } = this.state;\r\n        uploadedData.map((item) => {\r\n            if (item.checked) {\r\n                if (event.target.checked) item.addTags = tagstext\r\n                else item.addTags = item.addTags\r\n            }\r\n            else {\r\n                item.addTags = item.addTags\r\n            }\r\n        })\r\n        this.setState({\r\n            tagsStatus: event.target.checked, uploadedData\r\n        })\r\n    }\r\n    updateStatusCopy = event => {\r\n        const { uploadedData, copyrightValue } = this.state;\r\n        uploadedData.map((item) => {\r\n            if (item.checked) {\r\n                if (event.target.checked) item.copyright = copyrightValue\r\n                else item.copyright = item.copyright\r\n            }\r\n            else {\r\n                item.copyright = item.copyright\r\n            }\r\n        })\r\n\r\n        this.setState({\r\n            copyrightStatus: event.target.checked, uploadedData\r\n        })\r\n    }\r\n\r\n    onChangeCaption = event => {\r\n        const { uploadedData, captionStatus } = this.state;\r\n        uploadedData.map((item) => {\r\n            if (item.checked) {\r\n                if (captionStatus) item.caption = event.target.value\r\n                else item.caption = item.caption\r\n            }\r\n            else {\r\n                item.caption = item.caption\r\n            }\r\n        })\r\n        this.setState({ captionText: event.target.value, uploadedData })\r\n    }\r\n\r\n    onLoadAddCaption = () => {\r\n        var { uploadedData, captionText, captionStatus } = this.state;\r\n\r\n        if (captionStatus) {\r\n            uploadedData.map((item, index) => {\r\n                if (item.checked) {\r\n                    uploadedData[index].caption = captionText\r\n                    //item.caption = captionText\r\n                }\r\n                else {\r\n                    uploadedData[index].caption = \"\"\r\n                }\r\n            })\r\n            this.setState({ uploadedData })\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onChangeTags = (value) => {\r\n\r\n\r\n        const { uploadedData, tagsStatus } = this.state;\r\n        uploadedData.map((item) => {\r\n            if (item.checked) {\r\n                if (tagsStatus) item.addTags = value\r\n                else item.addTags = item.addTags\r\n            }\r\n            else {\r\n                item.addTags = item.addTags\r\n            }\r\n        })\r\n        this.setState({ tagstext: value, uploadedData })\r\n    }\r\n    onLoadTags = () => {\r\n        var { uploadedData, tagstext, tagsStatus } = this.state;\r\n        if (tagsStatus) {\r\n            uploadedData.map((item, index) => {\r\n                if (item.checked) {\r\n\r\n                    uploadedData[index].addTags = tagstext\r\n                    //item.addTags = tagstext\r\n                }\r\n                else {\r\n                    uploadedData[index].addTags = \"\"\r\n                }\r\n            })\r\n        }\r\n\r\n        this.setState({ uploadedData })\r\n    }\r\n    onChangeCopyRight = (value) => event => {\r\n        const { uploadedData, copyrightStatus } = this.state;\r\n        uploadedData.map((item) => {\r\n            if (item.checked) {\r\n                if (copyrightStatus) item.copyright = value\r\n                //else item.copyright = false changes by shlok\r\n            }\r\n            else {\r\n                item.copyright = item.copyright\r\n            }\r\n        })\r\n        this.setState({ copyrightValue: value, uploadedData })\r\n    }\r\n    onLoadCopyRight = () => {\r\n\r\n        var { uploadedData, copyrightValue, copyrightStatus } = this.state;\r\n        if (copyrightStatus) {\r\n            uploadedData.map((item, index) => {\r\n                if (item.checked) {\r\n                    //item.copyright = copyrightValue\r\n                    uploadedData[index].copyright = copyrightValue\r\n                }\r\n                else {\r\n                    uploadedData[index].copyright = false\r\n                }\r\n            })\r\n            this.setState({ uploadedData })\r\n        }\r\n\r\n    }\r\n\r\n    handleClose = () => {\r\n        const { uploadedData } = this.state\r\n\r\n        if (uploadedData && uploadedData.length > 0) {\r\n\r\n            Swal.fire({\r\n                title: 'Are you sure?',\r\n                text: \"You want to  discard changes!\",\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                confirmButtonText: 'Yes, discard changes!'\r\n            }).then((result) => {\r\n                if (result.isConfirmed) {\r\n                    if ($(\"#resetUppyUpload\")) {\r\n                        $(\"#resetUppyUpload\").click()\r\n                    }\r\n                    this.props.editMediaHandleCallback(false)\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            this.props.editMediaHandleCallback(false)\r\n        }\r\n\r\n    };\r\n\r\n    showModalTypeCallback = (showModalType) => {\r\n        this.setState({\r\n            showModalType: showModalType\r\n        })\r\n    }\r\n    isUploaded = () => {\r\n        const { collection } = this.state\r\n        this.setState({\r\n            isUploaded: !this.state.isUploaded\r\n        })\r\n    }\r\n    onUploadedData = (newObject) => {\r\n        const { uploadedData, isUpdate } = this.state;\r\n        uploadedData.push(newObject)\r\n        this.setState({ uploadedData, isUpdate: !isUpdate }, () => this.onloadCheckedPostCount())\r\n    }\r\n    onDeleteUploadedData = (id) => {\r\n        let { uploadedData } = this.state;\r\n        uploadedData = uploadedData.filter(item => item.localId != id)\r\n        this.setState({ uploadedData }, () => this.onloadCheckedPostCount())\r\n    }\r\n    onClearUPloadObject = (data) => {\r\n        this.setState({ uploadedData: data }, () => this.onloadCheckedPostCount())\r\n    }\r\n    onSelectedCollection = (newObject) => {\r\n        this.setState({ collection: newObject, collectionError: false })\r\n    }\r\n\r\n    onClickTORemovePost = (postIndex, localId) => event => {\r\n        let { uploadedData } = this.state;\r\n\r\n        if (postIndex > -1) {\r\n            uploadedData.splice(postIndex, 1);\r\n            if (localId) uppyPostEdit.removeFile(localId)\r\n        }\r\n        this.setState({ uploadedData }, () => this.onloadCheckedPostCount())\r\n\r\n    }\r\n    onClickTOCheckPost = (postIndex) => event => {\r\n        let { uploadedData, captionText, tagstext, copyrightValue, captionStatus, tagsStatus, copyrightStatus } = this.state;\r\n\r\n\r\n        if (postIndex > -1 && uploadedData[postIndex]) {\r\n            if (uploadedData[postIndex].checked) {\r\n                uploadedData[postIndex].checked = false\r\n                // uploadedData[postIndex].caption = \"\"\r\n                // uploadedData[postIndex].addTags = \"\"\r\n                // uploadedData[postIndex].copyright = false\r\n            }\r\n            else {\r\n                uploadedData[postIndex].checked = true\r\n                if (captionStatus) uploadedData[postIndex].caption = captionText\r\n                if (tagsStatus) uploadedData[postIndex].addTags = tagstext\r\n                if (copyrightStatus) uploadedData[postIndex].copyright = copyrightValue\r\n            }\r\n        }\r\n        this.setState({ uploadedData }, () => this.onloadCheckedPostCount())\r\n    }\r\n\r\n    onloadCheckedPostCount = () => {\r\n        const { uploadedData } = this.state;\r\n        var count = uploadedData.filter((item) => item.checked == true).length;\r\n        this.setState({ selected: count, checkAll: uploadedData.length == count ? true : false })\r\n    }\r\n    onClickToAllCheck = event => {\r\n        const { uploadedData, checkAll, captionText, tagstext, copyrightValue, captionStatus, tagsStatus, copyrightStatus } = this.state;\r\n        uploadedData.map((item) => {\r\n            item.checked = !checkAll\r\n            if (!checkAll == true) {\r\n                if (captionStatus) item.caption = captionText\r\n                if (tagsStatus) item.addTags = tagstext\r\n                if (copyrightStatus) item.copyright = copyrightValue\r\n            }\r\n            else {\r\n                item.caption = \"\"\r\n                item.addTags = \"\"\r\n                item.copyright = \"\"\r\n            }\r\n\r\n        })\r\n\r\n\r\n        this.setState({\r\n            uploadedData, selected: !checkAll == true ? uploadedData.length : 0, checkAll: !checkAll\r\n        })\r\n    }\r\n\r\n    onCaptionSingle = (postIndex, value) => {\r\n        let { uploadedData, updateRequest } = this.state;\r\n        if (postIndex > -1 && uploadedData[postIndex]) {\r\n            uploadedData[postIndex].checked = false\r\n            uploadedData[postIndex].captionSubmit = value\r\n            this.setState({ uploadedData, updateRequest: !updateRequest }, () => this.onloadCheckedPostCount())\r\n        }\r\n\r\n    }\r\n    onSubmitCaption = (postIndex, value) => {\r\n        let { uploadedData, updateRequest } = this.state;\r\n        if (postIndex > -1 && uploadedData[postIndex]) {\r\n            uploadedData[postIndex].caption = value\r\n            uploadedData[postIndex].checked = false\r\n            this.setState({ uploadedData, updateRequest: !updateRequest }, () => this.onloadCheckedPostCount())\r\n        }\r\n\r\n    }\r\n\r\n    onResetCaption = (postIndex, value) => {\r\n        let { uploadedData, updateRequest } = this.state;\r\n        if (postIndex > -1 && uploadedData[postIndex]) {\r\n            uploadedData[postIndex].caption = \"\"\r\n            this.setState({ uploadedData, updateRequest: !updateRequest })\r\n        }\r\n\r\n    }\r\n    onAddTagSingle = (postIndex, value) => {\r\n        let { uploadedData, updateRequest } = this.state;\r\n        if (postIndex > -1 && uploadedData[postIndex]) {\r\n            uploadedData[postIndex].addTagsSubmit = value\r\n            uploadedData[postIndex].checked = false\r\n            this.setState({ uploadedData, updateRequest: !updateRequest }, () => this.onloadCheckedPostCount())\r\n        }\r\n    }\r\n    onAddTagReset = (postIndex, value) => {\r\n        let { uploadedData, updateRequest } = this.state;\r\n        if (postIndex > -1 && uploadedData[postIndex]) {\r\n            uploadedData[postIndex].addTags = \"\"\r\n            this.setState({ uploadedData, updateRequest: !updateRequest })\r\n        }\r\n\r\n    }\r\n    onAddTagSubmit = (postIndex, value) => {\r\n        let { uploadedData, updateRequest } = this.state;\r\n        if (postIndex > -1 && uploadedData[postIndex]) {\r\n\r\n            uploadedData[postIndex].addTags = value\r\n            uploadedData[postIndex].checked = false\r\n            this.setState({ uploadedData, updateRequest: !updateRequest }, () => this.onloadCheckedPostCount())\r\n        }\r\n\r\n    }\r\n    onCopyRightSingle = (postIndex, value) => event => {\r\n        let { uploadedData, updateRequest } = this.state;\r\n        if (postIndex > -1 && uploadedData[postIndex]) {\r\n            uploadedData[postIndex].copyright = value\r\n            uploadedData[postIndex].checked = false\r\n        }\r\n        this.setState({ uploadedData, updateRequest: !updateRequest }, () => this.onloadCheckedPostCount())\r\n    }\r\n\r\n    componentDidMount() {\r\n        getAllNetworks().then(response => {\r\n            const { response_code, networks, authRequire } = response.data;\r\n            if (response_code === 200) {\r\n                this.props.getNetworkList({ networks, authRequire });\r\n            }\r\n        });\r\n        this.props.getAllConnectedAccounts();\r\n        const overlay = document.querySelector(\".offcanvas-backdrop\")\r\n        if (overlay) {\r\n            overlay.click()\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { editMediaToggle, history } = this.props\r\n        const { isUploaded, uploadedData, collection } = this.state\r\n\r\n        return <Modal size={'full'} show={editMediaToggle} className=\"addAssetsModal border-0 p-0\" backdrop={false}>\r\n            <Modal.Header className={`py-0 px-lg-7 px-3 w-100 ${!isUploaded ? 'border-0' : ''}`}>\r\n                <div className=\"d-flex justify-content-between align-items-center bg-white w-100\">\r\n                    {!isUploaded ?\r\n                        <div className=\"addAssetsTitle d-flex align-items-center flex-shrink-1\">\r\n                            {/* <h1 className=\"text-dark fw-semibold fs-6 mb-0\">Import Assets</h1> */}\r\n                        </div>\r\n                        :\r\n                        <div className=\"addAssetsTitle d-flex align-items-center flex-shrink-1\">\r\n                            <Button variant='link' className=\"btn btn-icon btn-sm me-2 text-decoration-none\" onClick={() => this.isUploaded()}>\r\n                                <i className=\"ri-arrow-left-line icon-6\"></i>\r\n                            </Button>\r\n                            <h1 className=\"text-dark fw-semibold fs-6 mb-0\">Fill required assets information</h1>\r\n                        </div>\r\n                    }\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <Button variant='close' className=\"text-light\" onClick={this.handleClose}></Button>\r\n                    </div>\r\n                </div>\r\n            </Modal.Header>\r\n            <Modal.Body className=\"p-0 d-flex align-items-start border-0 flex-wrap w-100\">\r\n                <div className=\"assetsModalScroll w-100 px-lg-5 px-3\">\r\n                    {!isUploaded ?\r\n                        <Suspense fallback={<></>}><UploadAssets getAssetsCallback={this.isUploaded} onUploadedData={this.onUploadedData} onClearUPloadObject={this.onClearUPloadObject} history={history} uploadedData={this.state.uploadedData} onSelectedCollection={this.onSelectedCollection} collection={collection} collectionError={this.state.collectionError} editMediaHandleCallback={this.props.editMediaHandleCallback} isUpdate={this.state.isUpdate} uppyPostEdit={uppyPostEdit} uploadClose={this.handleClose} onDeleteUploadedData={this.onDeleteUploadedData} /></Suspense>\r\n                        :\r\n                        <Suspense fallback={<></>}><UploadedAssets uploadedData={uploadedData} length={uploadedData.length} selected={this.state.selected} onClickTORemovePost={this.onClickTORemovePost} onClickTOCheckPost={this.onClickTOCheckPost} updateStatusC={this.updateStatusC} updateStatusTag={this.updateStatusTag} updateStatusCopy={this.updateStatusCopy} captionStatus={this.state.captionStatus} tagsStatus={this.state.tagsStatus} copyrightStatus={this.state.copyrightStatus} onChangeCaption={this.onChangeCaption} updateRequest={this.state.updateRequest}\r\n                            onChangeTags={this.onChangeTags}\r\n                            onChangeCopyRight={this.onChangeCopyRight} captionText={this.state.captionText} tagstext={this.state.tagstext} copyrightValue={this.state.copyrightValue} onClickToAllCheck={this.onClickToAllCheck} checkAll={this.state.checkAll} collection={collection} history={history} editMediaHandleCallback={this.props.editMediaHandleCallback} onCaptionSingle={this.onCaptionSingle} onAddTagSingle={this.onAddTagSingle} onCopyRightSingle={this.onCopyRightSingle} onAddTagSubmit={this.onAddTagSubmit} onSubmitCaption={this.onSubmitCaption} onAddTagReset={this.onAddTagReset} onResetCaption={this.onResetCaption} onClearUPloadObject={this.onClearUPloadObject} uppyPostEdit={uppyPostEdit} /></Suspense>\r\n                    }\r\n                </div>\r\n            </Modal.Body>\r\n        </Modal>\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getNetworkList: (networkData) => dispatch({ type: GET_ALL_NETWORKS, payload: networkData }),\r\n        getAllConnectedAccounts: () => dispatch(getAllConnectedAccounts())\r\n    }\r\n}\r\nexport default connect(null, mapDispatchToProps)(AddAssetsModal);"],"names":["UploadedAssets","React","UploadAssets","companionUrl","uppyPostEdit","Uppy","id","debug","autoProceed","restrictions","maxFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","use","Transloadit","target","params","auth","key","steps","resize","robot","width","resize_strategy","background","store","bucket_region","bucket","secret","path","waitForEncoding","Instagram","GoogleDrive","Url","Webcam","AddAssetsModal","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","call","state","collection","showModalType","isUploaded","uploadedData","selected","checkAll","captionStatus","captionText","tagsStatus","tagstext","copyrightStatus","copyrightValue","collectionError","updateRequest","isUpdate","updateStatusC","event","_this$state","map","item","checked","caption","setState","updateStatusTag","_this$state2","addTags","updateStatusCopy","_this$state3","copyright","onChangeCaption","_this$state4","value","onLoadAddCaption","_this$state5","index","onChangeTags","_this$state6","onLoadTags","_this$state7","onChangeCopyRight","_this$state8","onLoadCopyRight","_this$state9","handleClose","length","Swal","title","text","icon","showCancelButton","confirmButtonText","then","result","isConfirmed","$","click","props","editMediaHandleCallback","showModalTypeCallback","onUploadedData","newObject","_this$state10","push","onloadCheckedPostCount","onDeleteUploadedData","filter","localId","onClearUPloadObject","data","onSelectedCollection","onClickTORemovePost","postIndex","splice","removeFile","onClickTOCheckPost","_this$state11","count","onClickToAllCheck","_this$state12","onCaptionSingle","_this$state13","captionSubmit","onSubmitCaption","_this$state14","onResetCaption","_this$state15","onAddTagSingle","_this$state16","addTagsSubmit","onAddTagReset","_this$state17","onAddTagSubmit","_this$state18","onCopyRightSingle","_this$state19","_createClass","_this2","getAllNetworks","response","_response$data","response_code","networks","authRequire","getNetworkList","this","getAllConnectedAccounts","overlay","document","querySelector","_this3","_this$props","editMediaToggle","history","_this$state20","_jsxs","Modal","size","show","className","backdrop","children","_jsx","concat","Button","variant","onClick","Suspense","fallback","_Fragment","getAssetsCallback","uploadClose","Component","connect","dispatch","networkData","type","GET_ALL_NETWORKS","payload"],"sourceRoot":""}