{"version":3,"file":"static/js/982.32d9a539.chunk.js","mappings":"+SAQMA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACF,WAAYC,GAAQ,IAAD,yBACf,cAAMA,IAqCVC,aAAe,SAACC,EAAQC,GAAT,OAAoB,SAAAC,GAC/B,IAAIC,GAAI,WACRC,EAAAA,EAAAA,IAAyBJ,EAAQC,GAAQI,MAAK,SAACC,GAC3CH,EAAKI,QACR,GACJ,CALc,EApCX,EAAKC,MAAQ,CAAEC,cAAeX,EAAMY,kBAFrB,CAGlB,CA6IA,O,8BAnGD,WAAU,IAAD,OACGD,EAAkBE,KAAKH,MAAvBC,cAER,OAAO,gBAAKG,UAAU,QAAf,UACH,UAAC,cAAD,CAAeC,GAAG,0BAA0BC,iBAAiB,oBAA7D,WACI,iBAAKF,UAAU,4EAAf,WACI,UAAC,IAAD,CAAKG,QAAQ,UAAUH,UAAU,MAAjC,WACI,SAAC,SAAD,CAAUA,UAAU,GAApB,UACI,SAAC,SAAD,CAAUA,UAAU,YAAYI,SAAS,oBAAzC,oBAEJ,SAAC,SAAD,CAAUJ,UAAU,GAApB,UACI,SAAC,SAAD,CAAUA,UAAU,OAAOI,SAAS,uBAApC,0BAGR,0BACI,mBAAQC,KAAK,SAASL,UAAU,wFAAhC,oCAGR,SAAC,IAAD,CAAkBM,QAAU,CAAEC,kBAAkB,GAAhD,SACKV,GAAiBW,OAAOC,KAAKZ,GAAea,OAAS,GAAI,UAAC,YAAD,YACtD,SAAC,SAAD,CAAUN,SAAS,oBAAoBJ,UAAU,OAAjD,SAEQH,GAAiBW,OAAOC,KAAKZ,GAAec,KAAI,SAACC,EAAMC,GACnD,OAAO,iCAAE,iBAAKb,UAAU,8DAAf,WACL,iBAAMA,UAAU,wBAAhB,SAAyCY,KACzC,iBAAMZ,UAAU,4DAAhB,SAA8EH,EAAce,IAASf,EAAce,GAAMF,OAAS,EAAKb,EAAce,GAAMF,OAAS,OAEnKb,EAAce,IAASf,EAAce,GAAMF,OAAS,GAAI,gBAAKV,UAAU,GAAf,SAGjDH,EAAce,GAAMD,KAAI,SAACG,GACrB,OAAO,iBAAoBd,UAAS,yEAAoF,GAAhBc,EAAMzB,OAAN,eAAjG,WACH,gBAAKW,UAAU,+DAAf,UACI,gBAAKe,IAAI,MAAMC,KAAKC,EAAAA,EAAAA,GAAQ,wCAAyCC,OAAO,KAAKC,MAAM,UAE3F,iBAAKnB,UAAU,mDAAf,WACI,iBAAKA,UAAU,0DAAf,WACI,SAAC,KAAD,CAAMoB,GAAI,QAASpB,UAAU,qEAA7B,SAAmGc,EAAMO,QAAQC,WACjH,iBAAMtB,UAAU,qBAAhB,SAAsCuB,IAAO,IAAIC,KAA0B,IAArBV,EAAMO,QAAQI,OAAcC,OAAO,gBAE7F,gBAAK1B,UAAU,2BAAf,UACI,iBAAMA,UAAU,qBAAhB,SACKc,EAAMO,QAAQM,cAXdb,EAAMb,GAiB1B,MAGA,OAGhB,OAGT,SAAC,SAAD,CAAUG,SAAS,uBAAuBJ,UAAU,OAApD,SAEQH,GAAiBW,OAAOC,KAAKZ,GAAec,KAAI,SAACC,EAAMC,GACnD,OAAOhB,EAAce,IAASf,EAAce,GAAMF,OAAS,GAAKb,EAAce,GAAMgB,QAAO,SAACC,GAAD,OAAmB,GAAZA,EAAExC,MAAT,IAAsBqB,OAAS,GAAI,iCAAE,iBAAiBV,UAAU,8DAA3B,WAC5H,iBAAMA,UAAU,wBAAhB,SAAyCY,KACzC,iBAAMZ,UAAU,4DAAhB,SAA6EH,EAAce,IAASf,EAAce,GAAMF,OAAS,GAAKb,EAAce,GAAMgB,QAAO,SAACC,GAAD,OAAmB,GAAZA,EAAExC,MAAT,IAAsBqB,OAAS,EAAIb,EAAce,GAAMgB,QAAO,SAACC,GAAD,OAAmB,GAAZA,EAAExC,MAAT,IAAsBqB,OAAS,MAFxHG,GAIrIhB,EAAce,IAASf,EAAce,GAAMF,OAAS,GAAI,gBAAKV,UAAU,GAAf,SAGjDH,EAAce,GAAMD,KAAI,SAACG,GACrB,OAAuB,GAAhBA,EAAMzB,QAAc,iBAAoBW,UAAU,yEAAyE8B,QAAS,EAAK3C,aAAa2B,EAAMb,GAAI,GAA5I,WACvB,gBAAKD,UAAU,+DAAf,UACI,gBAAKe,IAAI,MAAMC,KAAKC,EAAAA,EAAAA,GAAQ,wCAAyCC,OAAO,KAAKC,MAAM,UAE3F,iBAAKnB,UAAU,mDAAf,WACI,iBAAKA,UAAU,0DAAf,WACI,SAAC,KAAD,CAAMoB,GAAI,QAASpB,UAAU,qEAA7B,SAAmGc,EAAMO,QAAQC,WACjH,iBAAMtB,UAAU,qBAAhB,SAAsCuB,IAAO,IAAIC,KAA0B,IAArBV,EAAMO,QAAQI,OAAcC,OAAO,gBAE7F,gBAAK1B,UAAU,2BAAf,UACI,iBAAMA,UAAU,qBAAhB,SACKc,EAAMO,QAAQM,cAXMb,EAAMb,IAelC,IAEZ,MAGA,QACP,IAGT,SAGI,WAIhC,OAjJChB,CAAsB8C,EAAAA,WAoJ5B,W","sources":["Layouts/Header/Components/Elements/Notifications.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Tab, Nav } from 'react-bootstrap';\r\nimport moment from 'moment';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport { Link } from 'react-router-dom';\r\nimport { baseUrl } from '../../../../Assets/AssetsHelper';\r\nimport { getNotificationList, notificationUpdateStatus } from '../../../../Services/Actions/homeActions'\r\n\r\nclass Notifications extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { notifications: props.notificationList }\r\n    }\r\n    // componentWillMount() {\r\n    //    // this.onLoad()\r\n    // }\r\n    // onLoad = () => {\r\n    //     var self = this;\r\n    //     getNotificationList().then((response) => {\r\n    //         const { notifications } = response.data.responseData;\r\n    //         if (notifications && notifications.length > 0) {\r\n    //             var data = {}\r\n    //             notifications.map((item) => {\r\n    //                 if (data[moment(new Date(item.message.time * 1000)).fromNow()]) {\r\n\r\n    //                     if (!data[moment(new Date(item.message.time * 1000)).fromNow()].includes(item.id)) {\r\n    //                         data[moment(new Date(item.message.time * 1000)).fromNow()].push(item)\r\n    //                     }\r\n\r\n    //                 }\r\n    //                 else {\r\n    //                     data[moment(new Date(item.message.time * 1000)).fromNow()] = [item]\r\n    //                 }\r\n\r\n    //             })\r\n    //             if (notifications && notifications.length > 0 && notifications.filter((a) => a.status == 1).length > 0) {\r\n    //                 let notificationCount = document.getElementById(\"notificationCount\");\r\n    //                 if (notifications.filter((a) => a.status == 0).length > 0) {\r\n    //                     notificationCount.style.display = 'block';\r\n    //                     notificationCount.innerText = notifications.filter((a) => a.status == 0).length;\r\n    //                 }\r\n    //             }\r\n    //             self.setState({ notifications: data })\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    updateStatus = (postId, status) => event => {\r\n        var self = this;\r\n        notificationUpdateStatus(postId, status).then((response) => {\r\n            self.onLoad()\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { notifications } = this.state;\r\n\r\n        return <div className=\"w-100\">\r\n            <Tab.Container id=\"notifications_tab_panel\" defaultActiveKey=\"all-notifications\">\r\n                <div className=\"d-flex align-items-center justify-content-between px-3 pt-2 border-bottom\">\r\n                    <Nav variant=\"default\" className=\"nav\">\r\n                        <Nav.Item className=\"\">\r\n                            <Nav.Link className=\"me-3 px-0\" eventKey=\"all-notifications\">All</Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item className=\"\">\r\n                            <Nav.Link className=\"px-0\" eventKey=\"unread-notifications\">Unread</Nav.Link>\r\n                        </Nav.Item>\r\n                    </Nav>\r\n                    <div>\r\n                        <button type=\"button\" className=\"btn btn-link btn-sm px-0 h-auto fw-bold text-decoration-none btn-active-color-primary\">Mark all as read</button>\r\n                    </div>\r\n                </div>\r\n                <PerfectScrollbar options={ { wheelPropagation: false } }>\r\n                    {notifications && Object.keys(notifications).length > 0 ? <Tab.Content>\r\n                        <Tab.Pane eventKey=\"all-notifications\" className=\"pb-3\">\r\n                            {\r\n                                notifications && Object.keys(notifications).map((iNot, index) => {\r\n                                    return <><div className=\"d-flex align-items-center justify-content-between px-3 py-1\">\r\n                                        <span className=\"text-gray-800 fw-bold\">{iNot}</span>\r\n                                        <span className=\"bg-primary badge rounded-5 min-w-30 text-light-alt d-none\">{(notifications[iNot] && notifications[iNot].length > 0) ? notifications[iNot].length : 0}</span>\r\n                                    </div>\r\n                                        {notifications[iNot] && notifications[iNot].length > 0 ? <div className=\"\">\r\n\r\n                                            {\r\n                                                notifications[iNot].map((imNot) => {\r\n                                                    return <div key={imNot.id} className={`px-3 d-flex align-items-start border-bottom notification-item  ${imNot.status == 0 ? `bg-light` : ``}`}>\r\n                                                        <div className=\"symbol symbol-38 rounded-1 overflow-hidden me-2 bg-light p-2\">\r\n                                                            <img alt=\"Pic\" src={baseUrl(\"media/icons/social-icons/twitter.svg\")} height=\"40\" width=\"40\" />\r\n                                                        </div>\r\n                                                        <div className=\"d-flex align-items-start flex-column flex-grow-1\">\r\n                                                            <div className=\"d-flex algin-items-center justify-content-between w-100\">\r\n                                                                <Link to={'/home'} className=\"text-hover-primary text-gray-800 fw-bold text-decoration-none me-2\">{imNot.message.subject}</Link>\r\n                                                                <span className=\"text-gray-500 fs-9\">{moment(new Date(imNot.message.time * 1000)).format(\"hh:mma\")}</span>\r\n                                                            </div>\r\n                                                            <div className=\"d-flex algin-items-start\">\r\n                                                                <span className=\"text-gray-600 fs-9\">\r\n                                                                    {imNot.message.text}\r\n                                                                </span>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n\r\n                                                })\r\n                                            }\r\n\r\n                                        </div> : null}\r\n                                    </>\r\n\r\n                                })\r\n                            }\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"unread-notifications\" className=\"pb-3\">\r\n                            {\r\n                                notifications && Object.keys(notifications).map((iNot, index) => {\r\n                                    return notifications[iNot] && notifications[iNot].length > 0 && notifications[iNot].filter((a) => a.status == 0).length > 0 ? <><div key={index} className=\"d-flex align-items-center justify-content-between px-3 py-1\">\r\n                                        <span className=\"text-gray-800 fw-bold\">{iNot}</span>\r\n                                        <span className=\"bg-primary badge rounded-5 min-w-30 text-light-alt d-none\">{notifications[iNot] && notifications[iNot].length > 0 && notifications[iNot].filter((a) => a.status == 0).length > 0 ? notifications[iNot].filter((a) => a.status == 0).length : 0}</span>\r\n                                    </div>\r\n                                        {notifications[iNot] && notifications[iNot].length > 0 ? <div className=\"\">\r\n\r\n                                            {\r\n                                                notifications[iNot].map((imNot) => {\r\n                                                    return imNot.status == 0 ? <div key={imNot.id} className=\"px-3 d-flex align-items-start border-bottom notification-item bg-light\" onClick={this.updateStatus(imNot.id, 1)}>\r\n                                                        <div className=\"symbol symbol-38 rounded-1 overflow-hidden me-2 bg-light p-2\">\r\n                                                            <img alt=\"Pic\" src={baseUrl(\"media/icons/social-icons/twitter.svg\")} height=\"40\" width=\"40\" />\r\n                                                        </div>\r\n                                                        <div className=\"d-flex align-items-start flex-column flex-grow-1\">\r\n                                                            <div className=\"d-flex algin-items-center justify-content-between w-100\">\r\n                                                                <Link to={'/home'} className=\"text-hover-primary text-gray-800 fw-bold text-decoration-none me-2\">{imNot.message.subject}</Link>\r\n                                                                <span className=\"text-gray-500 fs-9\">{moment(new Date(imNot.message.time * 1000)).format(\"hh:mma\")}</span>\r\n                                                            </div>\r\n                                                            <div className=\"d-flex algin-items-start\">\r\n                                                                <span className=\"text-gray-600 fs-9\">\r\n                                                                    {imNot.message.text}\r\n                                                                </span>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div> : null\r\n\r\n                                                })\r\n                                            }\r\n\r\n                                        </div> : null}\r\n                                    </> : null\r\n\r\n\r\n                                })\r\n                            }\r\n                        </Tab.Pane>\r\n                    </Tab.Content> : null}\r\n                </PerfectScrollbar>\r\n            </Tab.Container>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Notifications"],"names":["Notifications","props","updateStatus","postId","status","event","self","notificationUpdateStatus","then","response","onLoad","state","notifications","notificationList","this","className","id","defaultActiveKey","variant","eventKey","type","options","wheelPropagation","Object","keys","length","map","iNot","index","imNot","alt","src","baseUrl","height","width","to","message","subject","moment","Date","time","format","text","filter","a","onClick","Component"],"sourceRoot":""}