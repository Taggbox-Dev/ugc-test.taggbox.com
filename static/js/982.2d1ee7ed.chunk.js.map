{"version":3,"file":"static/js/982.2d1ee7ed.chunk.js","mappings":"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","sources":["Layouts/Header/Components/Elements/Notifications.js"],"sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { connect } from \"react-redux\";\nimport queryString from 'query-string';\nimport { Tab, Nav } from 'react-bootstrap';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { Link } from 'react-router-dom';\nimport { baseUrl } from '../../../../Assets/AssetsHelper';\nimport { getNotificationList, notificationUpdateStatus } from '../../../../Services/Actions/homeActions'\nimport { getLoadNotify } from '../../../../Services/Actions/loginActions'\n\nclass Notifications extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { notifications: props.notificationList }\n    }\n    updateStatus = (postId, status) => event => {\n        var self = this;\n        notificationUpdateStatus(postId, status).then((response) => {\n            self.props.getLoadNotify()\n        })\n        this.onRequest()\n    }\n    onRequest = () => {\n        const parsed = queryString.parse(window.location.search);\n        if ((parsed && Object.keys(parsed).length > 0) || String(window.location.href).includes(\"assets\")) {\n            const channel = new BroadcastChannel('connect');\n            channel.postMessage(JSON.stringify({ type: 'assets-redirect' }));\n        }\n    }\n    onClickToRedirect = event => this.onRequest()\n\n    render() {\n        const { notifications } = this.state;\n\n        return <div className=\"w-100\">\n            <Tab.Container id=\"notifications_tab_panel\" defaultActiveKey=\"all-notifications\">\n                <div className=\"d-flex align-items-center justify-content-between px-3 pt-2 border-bottom\">\n                    <Nav variant=\"underline\" className=\"nav\">\n                        <Nav.Item className=\"\">\n                            <Nav.Link className=\"me-3 px-0 fw-medium\" eventKey=\"all-notifications\">All</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item className=\"\">\n                            <Nav.Link className=\"px-0 fw-medium\" eventKey=\"unread-notifications\">Unread</Nav.Link>\n                        </Nav.Item>\n                    </Nav>\n                    <div>\n                        <button type=\"button\" className=\"btn btn-link btn-sm px-0 h-auto fw-bold text-decoration-none btn-active-color-primary\">Mark all as read</button>\n                    </div>\n                </div>\n                <PerfectScrollbar options={{ wheelPropagation: false }}>\n                    {notifications && Object.keys(notifications).length > 0 ? <Tab.Content>\n                        <Tab.Pane eventKey=\"all-notifications\" className=\"pb-3 min-h-100\">\n                            {\n                                notifications && Object.keys(notifications).map((iNot, index) => {\n                                    return <Fragment key={index}><div className=\"d-flex align-items-center justify-content-between px-3 py-1\" >\n                                        <span className=\"text-gray-800 fw-bold\">{iNot}</span>\n                                        <span className=\"bg-primary badge rounded-5 min-w-30 text-light-alt d-none\">{(notifications[iNot] && notifications[iNot].length > 0) ? notifications[iNot].length : 0}</span>\n                                    </div>\n                                        {notifications[iNot] && notifications[iNot].length > 0 ? <div className=\"\">\n\n                                            {\n                                                notifications[iNot].map((imNot) => {\n                                                    return <Link to={imNot.url ? imNot.url : `#`} key={imNot.id} className={`px-3 d-flex align-items-start border-bottom notification-item text-decoration-none ${imNot.status == 0 ? `bg-light` : ``}`} onClick={this.onClickToRedirect}>\n                                                        <div className=\"symbol symbol-38 rounded-1 overflow-hidden me-2 bg-light p-2\">\n                                                            <img alt=\"Pic\" src={baseUrl(`media/icons/social-icon-id/${imNot.message.photo}`)} height=\"40\" width=\"40\" />\n                                                        </div>\n                                                        <div className=\"d-flex align-items-start flex-column flex-grow-1\">\n                                                            <div className=\"d-flex algin-items-center justify-content-between w-100\">\n                                                                <span className=\"text-hover-primary text-gray-800 fw-bold text-decoration-none me-2\">{imNot.message.subject}</span>\n                                                                <span className=\"text-gray-500 fs-9\">{moment(new Date(imNot.message.time * 1000)).format(\"hh:mma\")}</span>\n                                                            </div>\n                                                            <div className=\"d-flex algin-items-start\">\n                                                                <span className=\"text-gray-600 fs-9\">\n                                                                    {imNot.message.text}\n                                                                </span>\n                                                            </div>\n                                                        </div>\n                                                    </Link>\n\n                                                })\n                                            }\n\n                                        </div> : index == 0 ?\n                                            <div className=\"block-center\" style={{ height: 350 }}>\n                                                <p className=\"mb-0 text-muted\">No Notifications</p>\n                                            </div>\n                                            : null}\n                                    </Fragment>\n\n                                })\n                            }\n                        </Tab.Pane>\n                        <Tab.Pane eventKey=\"unread-notifications\" className=\"pb-3 min-h-100\">\n                            {\n                                notifications && Object.keys(notifications).map((iNot, index) => {\n                                    return notifications[iNot] && notifications[iNot].length > 0 && notifications[iNot].filter((a) => a.status == 0).length > 0 ? <Fragment key={index}><div className=\"d-flex align-items-center justify-content-between px-3 py-1\">\n                                        <span className=\"text-gray-800 fw-bold\">{iNot}</span>\n                                        <span className=\"bg-primary badge rounded-5 min-w-30 text-light-alt d-none\">{notifications[iNot] && notifications[iNot].length > 0 && notifications[iNot].filter((a) => a.status == 0).length > 0 ? notifications[iNot].filter((a) => a.status == 0).length : 0}</span>\n                                    </div>\n                                        {notifications[iNot] && notifications[iNot].length > 0 ?\n                                            <div className=\"\">\n                                                {notifications[iNot].map((imNot) => {\n                                                    return imNot.status == 0 ? <Link to={imNot.url ? imNot.url : `#`} key={imNot.id} className=\"px-3 d-flex align-items-start border-bottom notification-item bg-light text-decoration-none\" onClick={this.updateStatus(imNot.id, 1)}>\n                                                        <div className=\"symbol symbol-38 rounded-1 overflow-hidden me-2 bg-light p-2\">\n                                                            <img alt=\"Pic\" src={baseUrl(`media/icons/social-icon-id/${imNot.message.photo}`)} height=\"40\" width=\"40\" />\n                                                        </div>\n                                                        <div className=\"d-flex align-items-start flex-column flex-grow-1\">\n                                                            <div className=\"d-flex algin-items-center justify-content-between w-100\">\n                                                                <span className=\"text-hover-primary text-gray-800 fw-bold text-decoration-none me-2\">{imNot.message.subject}</span>\n                                                                <span className=\"text-gray-500 fs-9\">{moment(new Date(imNot.message.time * 1000)).format(\"hh:mma\")}</span>\n                                                            </div>\n                                                            <div className=\"d-flex algin-items-start\">\n                                                                <span className=\"text-gray-600 fs-9\">\n                                                                    {imNot.message.text}\n                                                                </span>\n                                                            </div>\n                                                        </div>\n                                                    </Link> : null\n\n                                                })}\n                                            </div>\n                                            : null}\n                                    </Fragment> : index == 0 ?\n                                        <div className=\"block-center\" style={{ height: 350 }}>\n                                            <p className=\"mb-0 text-muted\">No Unread Notifications</p>\n                                        </div>\n                                        : null\n\n\n                                })\n                            }\n                        </Tab.Pane>\n                    </Tab.Content> : <div className=\"block-center\" style={{ height: 150 }}>\n                        <p className=\"mb-0 text-muted\">No Notifications</p>\n                    </div>}\n                </PerfectScrollbar>\n            </Tab.Container>\n        </div>\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n\n    return {\n        notificationList: state.notifications.notificationList\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n\n        getLoadNotify: () => dispatch(getLoadNotify())\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Notifications);"],"names":["Notifications","props","updateStatus","postId","status","event","self","notificationUpdateStatus","then","response","getLoadNotify","onRequest","parsed","queryString","window","location","search","Object","keys","length","String","href","includes","BroadcastChannel","postMessage","JSON","stringify","type","onClickToRedirect","state","notifications","notificationList","this","className","id","defaultActiveKey","variant","eventKey","options","wheelPropagation","map","iNot","index","Fragment","imNot","to","url","onClick","alt","src","baseUrl","message","photo","height","width","subject","moment","Date","time","format","text","style","filter","a","Component","connect","dispatch"],"sourceRoot":""}