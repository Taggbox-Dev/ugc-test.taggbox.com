{"version":3,"file":"static/js/222.d0d7d81c.chunk.js","mappings":"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","sources":["Layouts/Main/MyAssets/AddAssetsModal/Compontnets/Elements/NetworksSkeleton.js","Layouts/Main/MyAssets/AddAssetsModal/Compontnets/Elements/Networks.js","Layouts/Main/MyAssets/AddAssetsModal/Compontnets/Elements/NetworkList.js","Layouts/Main/MyAssets/AddAssetsModal/Compontnets/UploadAssets.js"],"sourcesContent":["import React from 'react';\n\nconst numbers = Array.from({length: 14}, (_, i) => i + 1);\nconst NetworksSkeleton = () => {\n    return  <div className=\"\">\n                {numbers.map((number, index) => (\n                <div key={index} className=\"w-100 mb-1 fs-7 fw-medium text-start d-flex align-items-center px-3 py-2\">\n                    <span className=\"sk_rect h-24px w-24px me-2\"></span>\n                    <p className=\"sk_line sk_line_100 sk_line_height_12 my-1 w-75\"></p>\n                </div>\n                ))}\n            </div>\n\n}\n\nexport default NetworksSkeleton;\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { baseUrl } from '../../../../../../Assets/AssetsHelper';\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport NetworksSkeleton from './NetworksSkeleton';\nimport { GET_NETWORK_ICON, GET_NETWORK_NAME } from '../../../../../../Services/Utils/utils';\nimport { Button } from 'react-bootstrap';\nclass Networks extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            textValue: '',\n            networkList: props.networkList,\n            networkListLoading:false,\n            manualUpload:true\n        }\n    }\n    componentDidMount(){\n        const { networkList} = this.state;\n        if(networkList && networkList.length > 0 ){\n            this.setState({ networkListLoading: false })\n        }else{\n            this.setState({ networkListLoading: true })\n        }\n    }\n\n    filterNetworkList = (e) => {\n        let filteredList = this.filterList(e.target.value);\n        this.setState({ textValue: e.target.value, networkList: filteredList });\n    }\n\n    filterList = (value) => {\n        const { networkList } = this.props;\n        if (networkList.length > 0) {\n            return networkList.filter(network => network.name.toLowerCase().match(value.toLowerCase()));\n        }\n        return [];\n    }\n\n    uploadType = (uploadType, network) => {\n        this.props.uploadTypeCallback(uploadType, network)\n\n        this.setState({\n            manualUpload:uploadType == 'uploadAssets' ? true : false\n        })\n    };\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.networkList != nextProps.networkList) {\n            this.setState({ networkList: nextProps.networkList,networkListLoading: false  })\n        }else{\n            this.setState({ networkListLoading: this.props.networkList > 0 ? true : false})\n        }\n    }\n    render() {\n        const { selectedNetworkId } = this.props;\n        const { networkList, textValue, networkListLoading, manualUpload } = this.state;\n        return   <div className=\"card mb-xxl-4 mb-5 h-100\">\n                    <div className=\"card-body\">\n                        <h6 className=\"fs-7 mb-3\">Choose Network</h6>\n                        <div className=\"mb-4\">\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Search your network...\" value={textValue} onChange={(e) => this.filterNetworkList(e)} />\n                        </div>\n                        <Button variant='link' className={`btn-active-light border border-dashed py-3 w-100 mb-2 fs-7 fw-medium d-flex block-center text-decoration-none ${!selectedNetworkId ? 'bg-light':''}`} onClick={() => this.uploadType(\"uploadAssets\", null)}>\n                            <i className=\"ri-upload-cloud-fill icon-3 me-2 text-gray-600\"></i>\n                            Browse From Device\n                        </Button>\n                        <div className=\"addSourceNetworkList\">\n                        <PerfectScrollbar className=\"pe-2\">\n                            {!networkListLoading ? \n                                networkList && networkList.length > 0 ? networkList.map((network, index) => {\n                                    return <Button variant='link' key={network.id} data-id={network.id} className={`text-decoration-none w-100 btn-active-light btn-sm mb-1 fs-7 fw-medium text-start d-flex align-items-center ${selectedNetworkId === network.id ? 'bg-light' : ''}`} onClick={() => this.uploadType(network.id === 29 ? 'onsite-upload' : 'byNetwork', network)}>\n                                        <span className=\"symbol symbol-24 me-2 bg-light\">\n                                            <img className=\"object-center-contain\" src={baseUrl(`media/icons/social-icons-square/${GET_NETWORK_ICON(network.id)}.svg`)} alt={GET_NETWORK_NAME(network.id)} height={30} width={30} />\n                                        </span>\n                                        {network.id === 29 ? `SnapUp` : network.name}\n                                    </Button>\n                                }) :<span className=\"py-5 text-center d-block fs-8 fw-medium text-gray-500\">No Network Found</span>: <NetworksSkeleton />\n                            }\n                            </PerfectScrollbar>\n                        </div>\n                    </div>\n            </div>\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        networkData: state.networks.networkData\n    }\n}\nexport default connect(mapStateToProps)(Networks);","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { baseUrl } from '../../../../../../Assets/AssetsHelper';\nimport { GET_NETWORK_ICON, GET_NETWORK_NAME } from '../../../../../../Services/Utils/utils';\nimport { Button } from 'react-bootstrap';\nclass NetworkList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            networkList: props.networkList,\n            networkListLoading:false\n        }\n    }\n    componentDidMount(){\n        const { networkList} = this.state;\n        if(networkList && networkList.length > 0 ){\n            this.setState({ networkListLoading: false })\n        }else{\n            this.setState({ networkListLoading: true })\n        }\n    }\n\n    filterNetworkList = (e) => {\n        let filteredList = this.filterList(e.target.value);\n        this.setState({ textValue: e.target.value, networkList: filteredList });\n    }\n\n    filterList = (value) => {\n        const { networkList } = this.props;\n        if (networkList.length > 0) {\n            return networkList.filter(network => network.name.toLowerCase().match(value.toLowerCase()));\n        }\n        return [];\n    }\n\n    uploadType = (uploadType, network) => {\n        this.props.uploadTypeCallback(uploadType, network)\n\n        this.setState({\n            manualUpload:uploadType == 'uploadAssets' ? true : false\n        })\n    };\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.networkList != nextProps.networkList) {\n            this.setState({ networkList: nextProps.networkList,networkListLoading: false  })\n        }else{\n            this.setState({ networkListLoading: this.props.networkList > 0 ? true : false})\n        }\n    }\n    render() {\n        const { networkList, networkListLoading } = this.state;\n        const numbers = Array.from({length: 18}, (_, i) => i + 1);\n        return   <div className=\"w-100 my-5 block-center\" style={{minHeight:'calc(100vh - 150px)'}}>\n                        <div className=\"d-flex flex-column\">\n                            <h2 className=\"fs-6 mb-lg-10 mb-5 text-center\">First, select where you want the assets to come from.</h2>\n                            <ul className='network_list list-inline block-center flex-wrap w-100'>\n                                {!networkListLoading ? \n                                    networkList && networkList.length > 0 ? \n                                    <>\n                                   {networkList.map((network, index) => {\n                                        return <li key={index}><Button variant='secondary' data-id={network.id} className={`fs-7 fw-medium justify-content-start d-flex align-items-center w-100 text-nowrap px-5`} \n                                        onClick={() => this.uploadType(network.id === 29 ? 'onsite-upload' : 'byNetwork', network)}>\n                                            <span className=\"symbol symbol-24 me-2 bg-light\">\n                                                <img className=\"object-center-contain\" src={baseUrl(`media/icons/social-icons-square/${GET_NETWORK_ICON(network.id)}.svg?3432`)} alt={GET_NETWORK_NAME(network.id)} height={30} width={30} />\n                                            </span>\n                                            {GET_NETWORK_NAME(network.id)}\n                                        </Button></li>\n                                    })}\n                                    <li><Button variant='outline-secondary' data-id={0} className={`fs-7 fw-medium justify-content-start d-flex align-items-center w-100 text-nowrap px-5 border-dashed border-dark btn-active-light`} \n                                        onClick={() => this.uploadType('uploadAssets', null)}>\n                                        <span className=\"symbol symbol-22 me-2 bg-light\">\n                                            <img className=\"object-center-contain\" src={baseUrl(`media/icons/social-icons-square/${GET_NETWORK_ICON(0)}.svg`)} alt={GET_NETWORK_NAME(0)} height={30} width={30} />\n                                        </span>\n                                        {GET_NETWORK_NAME(0)}\n                                    </Button></li>\n                                    </>\n                                    : <span className=\"py-5 text-center d-block fs-8 fw-medium text-gray-500\">No Network Found</span>: \n                                    numbers.map((number, index) => (\n                                        <li key={index}><span className=\"sk_rect h-40px me-2 w-100\"></span></li>\n                                    ))\n                                }\n                            </ul>\n                        </div>\n                    </div>\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        networkData: state.networks.networkData\n    }\n}\nexport default connect(mapStateToProps)(NetworkList);","\nimport React, { Component, Suspense } from 'react';\nimport Swal from 'sweetalert2';\nimport { connect } from 'react-redux';\nimport Networks from './Elements/Networks';\nimport NetworkList from './Elements/NetworkList';\n\n\n\nconst NeedSupport = React.lazy(() => import('../../../CommonComponents/NeedSupport'));\nconst AddFeedByNetwork = React.lazy(() => import('./Elements/AddFeedByNetwork'));\nconst ChooseCollection = React.lazy(() => import('./Elements/ChooseCollection'));\nconst AssetsUploader = React.lazy(() => import('./Elements/AssetsUploader'));\nconst OnsiteUpload = React.lazy(() => import('../../../Feeds/OnsiteUpload/OnsiteUpload'));\n\n\nclass UploadAssets extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            uploadTypeSec: 'uploadAssets',\n            filterTabs: [],\n            selectedNetwork: null,\n            selectedCollection: null,\n            showNetworkList: true\n        };\n    }\n\n    uploadType = (uploadTypeVal, network) => {\n        this.setState({\n            uploadTypeSec: uploadTypeVal,\n            filterTabs: network ? network.networkTab : null,\n            selectedNetwork: network,\n            showNetworkList: false\n        })\n    }\n    clickToBack = (uploadTypeVal, network) => {\n        this.setState({\n            uploadTypeSec: uploadTypeVal,\n            filterTabs: network ? network.networkTab : null,\n            selectedNetwork: network,\n            showNetworkList: uploadTypeVal == \"uploadAssets\" && network == null ? true : false\n        })\n    }\n    getAssets = () => {\n        this.props.getAssetsCallback()\n    };\n    onUppyResetAndClose = event => {\n        const { uploadedData } = this.props\n        if (uploadedData && uploadedData.length > 0) {\n            const { onClearUPloadObject, uppyPostEdit } = this.props\n            uppyPostEdit.cancelAll()\n            uppyPostEdit.removeFile()\n            onClearUPloadObject([])\n        } else {\n            const { onClearUPloadObject, uppyPostEdit } = this.props\n            uppyPostEdit.cancelAll()\n            uppyPostEdit.removeFile()\n            onClearUPloadObject([])\n            this.props.editMediaHandleCallback(false)\n        }\n\n    }\n    onCancelUpload = event => {\n        const { uploadedData } = this.props\n        var self = this;\n        if (uploadedData && uploadedData.length > 0) {\n            Swal.fire({\n                title: 'Are you sure?',\n                text: \"You want to  discard changes!\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonText: 'Yes, discard changes!'\n            }).then((result) => {\n                if (result.isConfirmed) {\n                    const { onClearUPloadObject, uppyPostEdit } = self.props\n                    uppyPostEdit.cancelAll()\n                    uppyPostEdit.removeFile()\n                    onClearUPloadObject([])\n                }\n            })\n        }\n        else {\n            this.props.editMediaHandleCallback(false)\n        }\n    }\n    onUGCUploadCollection = (selectedCollection) => {\n        this.setState({ selectedCollection })\n    }\n    render() {\n        const { uploadTypeSec, filterTabs, selectedNetwork, selectedCollection, showNetworkList } = this.state;\n        const { uploadedData, collectionError, networkList } = this.props\n        return <div className=\"container px-0\">\n            {showNetworkList ?\n                <NetworkList uploadTypeCallback={this.uploadType} networkList={networkList} selectedNetworkId={selectedNetwork ? selectedNetwork.id : null} />\n                :\n                <div className=\"addSource d-flex flex-column flex-lg-row w-100 pt-5\">\n                    <div className=\"addSourceNetwork d-flex flex-column flex-shrink-0 pe-lg-4\">\n                        <Networks uploadTypeCallback={this.uploadType} networkList={networkList} selectedNetworkId={selectedNetwork ? selectedNetwork.id : null} />\n                    </div>\n                    <div className=\"flex-grow-1 w-100 mb-5 card\">\n                        <div className=\"card-body\">\n                            <div className=\"\">\n                                <h6 className=\"fs-7 mb-3\">Select or create a collection where you wish to upload your assets.</h6>\n                                <div className=\"mb-3\">\n                                    <Suspense fallback={<></>}>\n                                        <ChooseCollection {...this.props} selectedCollection={selectedCollection} isMulti={true} />\n                                    </Suspense>\n                                    {collectionError ? <span className=\"text-danger\">Please select collection.</span> : null}\n                                </div>\n                                {uploadTypeSec === 'uploadAssets' ?\n                                    <Suspense fallback={<></>}>\n                                        <AssetsUploader {...this.props} uppyPostEdit={this.props.uppyPostEdit} />\n                                    </Suspense>\n                                    : uploadTypeSec === 'onsite-upload' ?\n                                        <Suspense fallback={<></>}>\n                                            <OnsiteUpload onBack={() => this.clickToBack(\"uploadAssets\", null)} {...this.props} onUGCUploadCollection={this.onUGCUploadCollection} />\n                                        </Suspense>\n                                        : uploadTypeSec === 'byNetwork' ?\n                                            <Suspense fallback={<></>}>\n                                                <AddFeedByNetwork filterTabs={filterTabs} selectedNetwork={selectedNetwork} onBack={() => this.clickToBack(\"uploadAssets\", null)} {...this.props} />\n                                            </Suspense>\n                                            : null\n                                }\n                            </div>\n                            {uploadTypeSec === 'uploadAssets' ? <div className=\"d-flex flex-wrap align-items-center justify-content-between\">\n                                <Suspense fallback={<></>}>\n                                    <NeedSupport content={'Need Help'} supportUrl={'#'} videoUrl={'#'} changeText={true} />\n                                </Suspense>\n                                <div className=\"my-1 d-flex align-items-center justify-content-end flex-wrap\">\n                                    <button type=\"button\" className=\"btn btn-secondary me-3\" onClick={this.onCancelUpload}>Cancel</button>\n                                    <button type=\"button\" id=\"resetUppyUpload\" className=\"btn btn-secondary me-3\" onClick={this.onUppyResetAndClose} hidden>Uppy Reset</button>\n                                    <button type=\"button\" className={`btn btn-primary ${uploadedData && uploadedData.length > 0 ? `` : `disabled`}`} onClick={() => this.getAssets()}>Fetch Assets {uploadedData && uploadedData.length > 0 ? `(${uploadedData.length})` : ``}</button>\n                                </div>\n                            </div> : null}\n                        </div>\n                    </div>\n                </div>\n            }\n        </div>\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        networkList: state.addFeed.networkList\n    }\n}\n\nexport default connect(mapStateToProps)(UploadAssets);\n"],"names":["numbers","Array","from","length","_","i","_jsx","className","children","map","number","index","_jsxs","Networks","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","filterNetworkList","e","filteredList","filterList","target","value","setState","textValue","networkList","filter","network","name","toLowerCase","match","uploadType","uploadTypeCallback","manualUpload","state","networkListLoading","_createClass","key","this","nextProps","_this2","selectedNetworkId","_this$state","type","placeholder","onChange","Button","variant","concat","onClick","PerfectScrollbar","NetworksSkeleton","id","src","baseUrl","GET_NETWORK_ICON","alt","GET_NETWORK_NAME","height","width","Component","connect","networkData","networks","NetworkList","style","minHeight","_Fragment","NeedSupport","React","AddFeedByNetwork","ChooseCollection","AssetsUploader","OnsiteUpload","UploadAssets","uploadTypeVal","uploadTypeSec","filterTabs","networkTab","selectedNetwork","showNetworkList","clickToBack","getAssets","getAssetsCallback","onUppyResetAndClose","event","uploadedData","_this$props","onClearUPloadObject","uppyPostEdit","cancelAll","removeFile","_this$props2","editMediaHandleCallback","onCancelUpload","self","_assertThisInitialized","Swal","title","text","icon","showCancelButton","confirmButtonText","then","result","isConfirmed","_self$props","onUGCUploadCollection","selectedCollection","_this$props3","collectionError","Suspense","fallback","_objectSpread","isMulti","onBack","content","supportUrl","videoUrl","changeText","hidden","addFeed"],"sourceRoot":""}