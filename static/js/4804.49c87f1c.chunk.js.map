{"version":3,"file":"static/js/4804.49c87f1c.chunk.js","mappings":"2PAKMA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAQD,OARCA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KAMFC,WAAa,SAACA,EAAWC,GACrB,EAAKC,MAAMC,mBAAmBH,EAAWC,EAC5C,IAyBA,OAzBA,8BACD,WAAU,IAAD,OACL,EAA0CG,KAAKF,MAAvCG,EAAR,EAAQA,YAAYC,EAApB,EAAoBA,kBACpB,OAAO,SAAC,IAAD,WACH,iBAAKC,UAAU,4BAAf,WACI,gBAAKA,UAAU,OAAf,UACI,kBAAOC,KAAK,OAAOD,UAAU,eAAeE,YAAY,8BAE5D,oBAAQD,KAAK,SAASD,UAAU,2EAA2EG,QAAS,kBAAM,EAAKV,WAAW,eAAe,KAArC,EAApH,WACI,iBAAMO,UAAU,sBAAhB,UACI,gBAAKI,MAAM,6BAA6BC,QAAQ,YAAhD,UAA4D,iBAAMC,EAAE,kRAAkRC,KAAK,qBAFnW,wBAMIT,GAAeA,EAAYU,OAAS,EAAIV,EAAYW,KAAI,SAACf,EAASgB,GAC9D,OAAO,oBAAqCT,KAAK,SAASD,UAAS,qGAAgGD,IAAoBL,EAAQiB,GAAG,SAAS,IAAMR,QAAS,kBAAM,EAAKV,WAAwB,KAAbC,EAAQiB,GAAQ,gBAAgB,YAAYjB,EAAlE,EAAnN,WACH,iBAAMM,UAAU,wBAAhB,UACI,gBAAKA,UAAU,wBAAwBY,KAAKC,EAAAA,EAAAA,GAAQ,mCAAD,QAAoCC,EAAAA,EAAAA,IAAiBpB,EAAQiB,IAA7D,SAAyEI,IAAI,GAAGC,OAAQ,GAAIC,MAAO,OAEzJvB,EAAQwB,OAJN,iBAAuBxB,EAAQiB,IAMzC,IAAI,SAIpB,OAjCCnB,CAAiB2B,EAAAA,WA0CvB,WAAeC,EAAAA,EAAAA,KALS,SAACC,GACrB,MAAO,CACHC,YAAaD,EAAME,SAASD,YAEnC,GACD,CAAwC9B,E","sources":["Layouts/Main/MyAssets/AddAssetsModal/Compontnets/Elements/Networks.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { baseUrl } from '../../../../../../Assets/AssetsHelper';\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { GET_NETWORK_ICON } from '../../../../../../Services/Utils/utils';\nclass Networks extends Component {\n    // constructor() {\n    //     super();\n    //     //this.state = {showModalType:'addFeed' };\n    // }\n\n    uploadType = (uploadType,network) => {\n        this.props.uploadTypeCallback(uploadType,network)\n    };\n    render() {\n        const { networkList,selectedNetworkId } = this.props;\n        return <PerfectScrollbar>\n            <div className=\"addSourceNetworkList px-3\">\n                <div className=\"mb-4\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Search your network...\" />\n                </div>\n                <button type=\"button\" className=\"btn btn-active-light border border-dashed py-3 w-100 mb-2 fs-7 fw-medium\" onClick={() => this.uploadType(\"uploadAssets\",null)}>\n                    <span className=\"svg-icon svg-icon-2\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M7 20.9811C3.64378 20.7257 1 17.9216 1 14.5C1 12.1716 2.22429 10.1291 4.06426 8.9812C4.56469 5.044 7.92686 2 12 2C16.0731 2 19.4353 5.044 19.9357 8.9812C21.7757 10.1291 23 12.1716 23 14.5C23 17.9216 20.3562 20.7257 17 20.9811V21H7V20.9811ZM13 13H16L12 8L8 13H11V17H13V13Z\" fill=\"currentColor\"></path></svg>\n                    </span>Browse From Device\n                </button>\n                {\n                    networkList && networkList.length > 0 ? networkList.map((network, index) => {\n                        return <button key={`network${network.id}`} type=\"button\" className={`btn w-100 btn-active-light btn-sm mb-1 fs-7 fw-medium text-start d-flex align-items-center ${selectedNetworkId===network.id?'active':''}`} onClick={() => this.uploadType(network.id===29?'onsite-upload':'byNetwork',network)}>\n                            <span className=\"symbol symbol-24 me-2\">\n                                <img className=\"object-center-contain\" src={baseUrl(`media/icons/social-icons-square/${GET_NETWORK_ICON(network.id)}.svg`)} alt=\"\" height={30} width={30} />\n                            </span>\n                            {network.name}\n                        </button>\n                    }) : null\n                }\n            </div>\n        </PerfectScrollbar>\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        networkData: state.networks.networkData\n    }\n}\nexport default connect(mapStateToProps)(Networks);"],"names":["Networks","uploadType","network","props","uploadTypeCallback","this","networkList","selectedNetworkId","className","type","placeholder","onClick","xmlns","viewBox","d","fill","length","map","index","id","src","baseUrl","GET_NETWORK_ICON","alt","height","width","name","Component","connect","state","networkData","networks"],"sourceRoot":""}