{"version":3,"file":"static/js/7057.7509d717.chunk.js","mappings":"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","sources":["Layouts/Main/MyAssets/AddAssetsModal/Compontnets/UploadAssets.js"],"sourcesContent":["\nimport React, { Component, Suspense } from 'react';\nimport Swal from 'sweetalert2';\nimport Uppy from \"@uppy/core\";\nimport { Dashboard } from \"@uppy/react\";\nimport Transloadit from \"@uppy/transloadit\";\nimport GoogleDrive from \"@uppy/google-drive\";\nimport Instagram from \"@uppy/instagram\";\nimport Url from \"@uppy/url\";\nimport Webcam from \"@uppy/webcam\";\n\n\n\nconst NeedSupport = React.lazy(() => import('../../../CommonComponents/NeedSupport'));\nconst AddFeedByNetwork = React.lazy(() => import('./Elements/AddFeedByNetwork'));\nconst Networks = React.lazy(() => import('./Elements/Networks'));\nconst ChooseCollection = React.lazy(() => import('./Elements/ChooseCollection'));\nconst AssetsUploader = React.lazy(() => import('./Elements/AssetsUploader'));\nconst OnsiteUpload = React.lazy(() => import('./Elements/OnsiteUpload'));\n\n\nconst uppyKey = '0701d3d7f8d94e92a65a9cba388b1d96';\nconst uppyBucket = 'cloud.taggbox.com';\nconst uppyAwsKey = '47ABVORKG52UYE1KB28S';\nconst uppyAwsSecret = 'pcaTfeokaz28geAAns08H3yaGbOVz6ILgTptu19v';\n\n\nconst companionUrl = 'https://test.taggbox.com';\n\nconst uppyPostEdit = new Uppy({\n    id: \"editA\",\n    debug: true,\n    autoProceed: true,\n    restrictions: {\n        maxFileSize: 5000000,\n        maxNumberOfFiles: 500,\n        minNumberOfFiles: 1,\n        allowedFileTypes: [\"image/*\"],\n    },\n});\n\nuppyPostEdit.use(Transloadit, {\n    target: \"#a\",\n    params: {\n        auth: {\n            key: uppyKey,\n        },\n        steps: {\n            resize: {\n                robot: \"/image/resize\",\n                width: 500,\n                resize_strategy: \"fit\",\n                background: \"none\",\n            },\n            store: {\n                robot: \"/wasabi/store\",\n                bucket_region: \"us-west-1\",\n                bucket: uppyBucket,\n                key: uppyAwsKey,\n                secret: uppyAwsSecret,\n                path: 'onsiteupload/images/${file.id}'\n            },\n        },\n    },\n    waitForEncoding: true,\n});\nuppyPostEdit.use(Instagram, {\n    target: Uppy.Dashboard,\n    companionUrl: companionUrl,\n});\nuppyPostEdit.use(GoogleDrive, {\n    target: Uppy.Dashboard,\n    companionUrl: companionUrl,\n});\nuppyPostEdit.use(Url, { target: Uppy.Dashboard, companionUrl: companionUrl });\nuppyPostEdit.use(Webcam, {\n    target: Uppy.Dashboard,\n    companionUrl: companionUrl,\n});\nclass UploadAssets extends Component {\n\n    constructor() {\n        super();\n        this.state = { uploadTypeSec: 'uploadAssets' };\n    }\n\n    uploadType = (uploadTypeVal) => {\n        this.setState({\n            uploadTypeSec: uploadTypeVal\n        })\n    }\n    getAssets = () => {\n        this.props.getAssetsCallback()\n    };\n    onCancelUpload = event => {\n        const { uploadedData } = this.props\n        if (uploadedData && uploadedData.length > 0) {\n            Swal.fire({\n                title: 'Are you sure?',\n                text: \"You want to  discard changes!\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonText: 'Yes, discard changes!'\n            }).then((result) => {\n                if (result.isConfirmed) {\n                    const { onClearUPloadObject } = this.props\n                    uppyPostEdit.cancelAll()\n                    onClearUPloadObject([])\n                }\n            })\n        }\n        else {\n            this.props.editMediaHandleCallback(false)\n        }\n    }\n\n    render() {\n        const { uploadTypeSec } = this.state;\n        const { uploadedData, collectionError } = this.props\n\n        return <div className=\"container container-xs\">\n            <div className=\"block-center flex-column view-sm-h\">\n                <div className=\"addSource d-flex align-items-stretch flex-column flex-lg-row w-100\">\n                    <div className=\"addSourceNetwork d-flex flex-column flex-shrink-0 pe-lg-4\">\n                        <div className=\"card mb-xxl-4 mb-3\">\n                            <div className=\"card-body px-2\">\n                                <Suspense fallback={<></>}>\n                                    <Networks uploadTypeCallback={this.uploadType} />\n                                </Suspense>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"d-flex flex-column flex-grow-1 w-100 mb-3\">\n                        <div className=\"\">\n                            <h6 className=\"fs-7 mb-3\">Select the collection where you want to put your data</h6>\n                            <div className=\"mb-3\" style={{ maxWidth: 300 }}>\n                                <Suspense fallback={<></>}>\n                                    <ChooseCollection {...this.props} />\n                                </Suspense>\n                                {\n                                    collectionError ? <span className=\"text-danger\">Please select collection.</span> : null\n                                }\n                            </div>\n                            {uploadTypeSec === 'uploadAssets' ?\n                                <Suspense fallback={<></>}>\n                                    <AssetsUploader {...this.props} uppyPostEdit={uppyPostEdit} />\n                                </Suspense>\n                                : uploadTypeSec === 'onsite-upload' ?\n                                    <Suspense fallback={<></>}>\n                                        <OnsiteUpload />\n                                    </Suspense>\n                                    : uploadTypeSec === 'byNetwork' ?\n                                        <Suspense fallback={<></>}>\n                                            <AddFeedByNetwork />\n                                        </Suspense>\n                                        : null\n                            }\n\n                            <div className=\"d-flex flex-wrap align-items-center justify-content-between\">\n                                <Suspense fallback={<></>}>\n                                    <NeedSupport content={'Need Help'} supportUrl={'#'} videoUrl={'#'} />\n                                </Suspense>\n                                <div className=\"my-1 d-flex align-items-center justify-content-end flex-wrap\">\n                                    <button type=\"button\" className=\"btn btn-secondary me-3\" onClick={this.onCancelUpload}>Cancel</button>\n                                    <button type=\"button\" className={`btn btn-primary ${uploadedData && uploadedData.length > 0 ? `` : `disabled`}`} onClick={() => this.getAssets()}>Fetch Assets {uploadedData && uploadedData.length > 0 ? `(${uploadedData.length})` : ``}</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    }\n}\n\nexport default UploadAssets;"],"names":["NeedSupport","React","AddFeedByNetwork","Networks","ChooseCollection","AssetsUploader","OnsiteUpload","companionUrl","uppyPostEdit","Uppy","id","debug","autoProceed","restrictions","maxFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","use","Transloadit","target","params","auth","key","steps","resize","robot","width","resize_strategy","background","store","bucket_region","bucket","secret","path","waitForEncoding","Instagram","GoogleDrive","Url","Webcam","UploadAssets","uploadType","uploadTypeVal","setState","uploadTypeSec","getAssets","props","getAssetsCallback","onCancelUpload","event","uploadedData","length","Swal","title","text","icon","showCancelButton","confirmButtonText","then","result","isConfirmed","onClearUPloadObject","cancelAll","editMediaHandleCallback","state","this","collectionError","className","Suspense","fallback","uploadTypeCallback","style","maxWidth","content","supportUrl","videoUrl","type","onClick","Component"],"sourceRoot":""}