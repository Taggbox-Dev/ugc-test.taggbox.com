{"version":3,"file":"static/js/7713.0b90449b.chunk.js","mappings":"qVACMA,EAAiBC,IAAAA,MAAgB,CAAC,QAAS,QACpCC,EAAgBD,IAAAA,UAAoB,CAACD,EAAgBC,IAAAA,MAAgB,CAChFE,GAAIH,IACFC,IAAAA,MAAgB,CAClBG,GAAIJ,IACFC,IAAAA,MAAgB,CAClBI,GAAIL,IACFC,IAAAA,MAAgB,CAClBK,GAAIN,IACFC,IAAAA,MAAgB,CAClBM,IAAKP,IACHC,IAAAA,S,0JCJEO,EAAY,CAKhBC,GAAIR,IAAAA,OAEJS,KAAMT,IAAAA,OAENU,QAASV,IAAAA,KAETW,MAAOX,IAAAA,KAAAA,WAEPY,SAAUZ,IAAAA,KAQVa,MAAOZ,EAEPa,SAAUd,IAAAA,OAEVe,kBAAmBf,IAAAA,KAMnBgB,eAAgBhB,IAAAA,OAMhBiB,YAAajB,IAAAA,MAAgB,CAAC,SAM9BkB,KAAMlB,IAAAA,KAENmB,SAAUnB,IAAAA,OAEVoB,QAASpB,IAAAA,OAETqB,KAAMrB,IAAAA,QAYFsB,EAA8BC,EAAAA,YAAiB,WAelDC,GAfkD,IACnDb,EADmD,EACnDA,MACAc,EAFmD,EAEnDA,SACAN,EAHmD,EAGnDA,SACAH,EAJmD,EAInDA,eACAI,EALmD,EAKnDA,QACAC,EANmD,EAMnDA,KACAP,EAPmD,EAOnDA,SACAC,EARmD,EAQnDA,kBACAH,EATmD,EASnDA,SACAH,EAVmD,EAUnDA,KACAD,EAXmD,EAWnDA,GACAS,EAZmD,EAYnDA,YACAC,EAbmD,EAanDA,KACGQ,GAdgD,mBAe7BC,EAAAA,EAAAA,MAAMC,EAAAA,GAAD,QAAC,QAC5BJ,IAAKA,GACFE,GAFwB,IAG3BD,SAAU,EAAcI,EAAAA,EAAAA,KAAKC,EAAAA,EAAgB,CAC3CtB,GAAIA,EACJC,KAAMA,EACNY,KAAMA,EACND,QAASA,EACTR,SAAUA,EACVmB,cAAeZ,EACfM,SAAUd,KACKkB,EAAAA,EAAAA,KAAKG,EAAAA,EAAc,CAClCC,KAAMnB,EACNoB,cAAenB,EACfC,eAAgBA,EAChBI,QAASH,EACTC,KAAMA,EACNO,SAAUA,OAhCuC,IAmCrDH,EAAea,YAAc,iBAC7Bb,EAAef,UAAYA,EAC3B,Q,yECpGM6B,EAAkBb,EAAAA,MAAW,kBAAM,+BAAN,IAgKnC,EA9JMc,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACF,aAAe,IAAD,yBACV,gBAGJC,gBAAkB,SAAC9B,GAAD,OAAQ,SAAA+B,GAAK,OAAI,EAAKC,SAAS,CAC7CC,WAAW,EACXjC,GAAIA,GAFuB,CAAb,EAJJ,EAQdkC,mBAAqB,SAACC,GAClB,EAAKH,SAAS,CACVC,UAAWE,GAElB,EAZa,EAcdC,SAAW,SAACpC,GACR,EAAKgC,SAAS,CACVK,YAAY,IAEhBC,YAAW,WACP,EAAKN,SAAS,CACVK,YAAY,GAEnB,GAAE,OACHE,EAAAA,EAAAA,IAAkBvC,EACrB,EAxBa,EAyBdwC,eAAiB,SAACC,GAAD,OAAY,SAAAV,GACzB,IAAIW,GAAI,UACA1C,EAAO,EAAK2C,MAAZ3C,GACR,EAAKgC,SAAS,CAAEY,WAAW,IACvBH,GAAUI,OAAOJ,GAAQK,OAAS,GAClCC,EAAAA,EAAAA,GAAgB,CAAEC,SAAUC,SAASC,cAAclD,GAAU,eAAemD,UAAWC,MAAOX,EAAQY,KAAM,IAAKC,MAAK,SAACC,GACnHC,EAAAA,GAAAA,QAAc,yCACdd,EAAKV,SAAS,CAAEC,WAAW,EAAOW,WAAW,GAChD,IAIDY,EAAAA,GAAAA,MAAY,yBAEnB,CAdgB,EAzBH,EAwCdC,cAAgB,SAAA1B,GACRA,EAAM2B,OAAOC,OAASC,SAAS7B,EAAM2B,OAAOC,OAAS,GAAG,EAAK3B,SAAS,CAAE6B,MAAO9B,EAAM2B,OAAOC,MAAQ,IAAM,IAAM5B,EAAM2B,OAAOC,OACpI,EA1Ca,EA2CdG,eAAiB,SAAA/B,GACTA,EAAM2B,OAAOC,OAASC,SAAS7B,EAAM2B,OAAOC,OAAS,GAAG,EAAK3B,SAAS,CAAE+B,OAAQhC,EAAM2B,OAAOC,MAAQ,IAAM,IAAM5B,EAAM2B,OAAOC,OACrI,EA7Ca,EA8CdK,mBAAqB,SAACL,GAAD,OAAW,SAAA5B,GAC5B,EAAKC,SAAS,CAAEiC,UAAWN,GAC9B,CAFoB,EA9CP,EAiDdO,oBAAsB,SAACP,GAAD,OAAW,SAAA5B,GAC7B,EAAKC,SAAS,CAAEmC,WAAYR,GAC/B,CAFqB,EA/ClB,EAAKhB,MAAQ,CAAEV,WAAW,EAAOI,YAAY,EAAOO,WAAW,EAAOqB,UAAW,IAAKE,WAAY,IAAKN,MAAO,MAAOE,OAAQ,MAAO/D,GAAI,eAF9H,CAGb,CAuJA,OAvJA,8BAiDD,WAAU,IAAD,OACL,EAAwEoE,KAAKzB,MAArEN,EAAR,EAAQA,WAAYJ,EAApB,EAAoBA,UAAW4B,EAA/B,EAA+BA,MAAOE,EAAtC,EAAsCA,OAAQE,EAA9C,EAA8CA,UAAWE,EAAzD,EAAyDA,WACzD,EAA2BC,KAAKlD,MAAxBmD,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,KAElB,OAAO,iBAAKC,UAAU,aAAf,WACH,gBAAKA,UAAU,OAAf,UACI,iBAAKA,UAAU,MAAf,WACI,gBAAKA,UAAU,MAAf,UACI,UAACC,EAAA,EAAD,YACI,SAACA,EAAA,OAAD,qBACA,SAACC,EAAA,UAAD,CAAcpB,KAAK,SAASqB,aAAcb,EAAOF,MAAOE,EAAOc,SAAUP,KAAKX,iBAC9E,UAAC,EAAD,CAAgBpD,MAAM,MAAMO,QAAQ,oBAAoBT,MAAO8D,EAA/D,WACI,SAAC7C,EAAA,OAAD,CAAenB,KAAK,IAAIC,QAASkE,KAAKJ,mBAAmB,KAAzD,0BACA,SAAC5C,EAAA,OAAD,CAAenB,KAAK,IAAIC,QAASkE,KAAKJ,mBAAmB,MAAzD,yBACA,SAAC5C,EAAA,OAAD,CAAenB,KAAK,IAAIC,QAASkE,KAAKJ,mBAAmB,MAAzD,0CAIZ,gBAAKO,UAAU,MAAf,UACI,UAACC,EAAA,EAAD,YACI,SAACA,EAAA,OAAD,sBACA,SAACC,EAAA,UAAD,CAAcpB,KAAK,SAASqB,aAAcX,EAAQJ,MAAOI,EAAQY,SAAUP,KAAKN,kBAChF,UAAC,EAAD,CAAgBzD,MAAM,MAAMO,QAAQ,oBAAoBT,MAAOgE,EAA/D,WACI,SAAC/C,EAAA,OAAD,CAAenB,KAAK,IAAIC,QAASkE,KAAKF,oBAAoB,KAA1D,0BACA,SAAC9C,EAAA,OAAD,CAAenB,KAAK,IAAIC,QAASkE,KAAKF,oBAAoB,MAA1D,yBACA,SAAC9C,EAAA,OAAD,CAAenB,KAAK,IAAIC,QAASkE,KAAKF,oBAAoB,MAA1D,gDAMpB,eAAIK,UAAU,UAAd,SAAyBF,KACzB,gBAAKE,UAAU,8BAAf,UACI,UAACK,EAAA,YAAD,CAAe5E,GAAG,oBAAoB6E,iBAAiB,iBAAvD,WACI,UAACC,EAAA,EAAD,CAAKlE,QAAQ,YAAY2D,UAAU,qBAAnC,WACI,SAACO,EAAA,OAAD,CAAUP,UAAU,OAApB,UACI,SAACO,EAAA,OAAD,CAAUC,SAAS,iBAAiBR,UAAU,mBAA9C,0BAIJ,SAACO,EAAA,OAAD,CAAUP,UAAU,GAApB,UACI,SAACO,EAAA,OAAD,CAAUC,SAAS,mBAAmBR,UAAU,mBAAhD,0BAKR,UAACK,EAAA,UAAD,YACI,SAACA,EAAA,OAAD,CAAUG,SAAS,iBAAnB,UACI,iBAAKR,UAAU,iCAAf,WACI,kBAAMA,UAAU,yCAAyCvE,GAAG,aAAaE,QAAS,WAAQ,EAAKkC,SAAS,aAAe,EAAE4C,MAAO,CAAEC,UAAW,aAA7I,kDAC6CX,GAAQY,OAAOC,KAAKb,GAAMxB,OAAS,EAAIwB,EAAKc,OAAS,KADlG,+BACoIvB,EAAOI,EAD3I,WAC8JF,EAAQI,EADtK,0BAEqBkB,EAAAA,GAFrB,0CAIA,iBAAKd,UAAU,2DAAf,WACI,SAACe,EAAA,EAAD,CAAgBC,UAAU,MAAMC,SAAS,SAACC,EAAA,EAAD,UAAWpD,EAA2B,cAAd,cAAjE,UACI,mBAAQgB,KAAK,SAASkB,UAAU,2DAA2DrE,QAAS,WAAQ,EAAKkC,SAAS,aAAe,EAAzI,SACMC,GAGE,cAAGkC,UAAU,gBAAgBS,MAAO,CAAEU,MAAO,cAF7C,cAAGnB,UAAU,2BAMzB,SAACe,EAAA,EAAD,CAAgBC,UAAU,MAAMC,SAAS,SAACC,EAAA,EAAD,yBAAzC,UACI,mBAAQlB,UAAU,mEAAmElB,KAAK,SAASnD,QAASkE,KAAKtC,gBAAgB,eAAjI,UACI,cAAGyC,UAAU,8BAMjC,SAACK,EAAA,OAAD,CAAUG,SAAS,mBAAnB,UACI,iBAAKR,UAAU,iCAAf,WACI,kBAAMA,UAAU,yCAAyCvE,GAAG,mBAAmBE,QAAS,WAAQ,EAAKkC,SAAS,mBAAqB,EAAnI,0BACqBuD,EAAAA,GAAUrB,GAAQY,OAAOC,KAAKb,GAAMxB,OAAS,EAAIwB,EAAKc,OAAS,KADpF,+DAGA,iBAAKb,UAAU,2DAAf,WACI,SAACe,EAAA,EAAD,CAAgBC,UAAU,MAAMC,SAAS,SAACC,EAAA,EAAD,UAAWpD,EAA2B,cAAd,cAAjE,UACI,mBAAQgB,KAAK,SAASkB,UAAU,2DAA2DrE,QAAS,WAAQ,EAAKkC,SAAS,mBAAqB,EAA/I,SACMC,GAGE,cAAGkC,UAAU,gBAAgBS,MAAO,CAAEU,MAAO,cAF7C,cAAGnB,UAAU,2BAMzB,SAACe,EAAA,EAAD,CAAgBC,UAAU,MAAMC,SAAS,SAACC,EAAA,EAAD,yBAAzC,UACI,mBAAQlB,UAAU,mEAAmElB,KAAK,SAASnD,QAASkE,KAAKtC,gBAAgB,qBAAjI,UACI,cAAGyC,UAAU,sCAS7C,SAAC,EAAAqB,SAAD,CAAUC,UAAU,wBAApB,SACK5D,GAAY,SAACL,EAAD,CAAiBM,mBAAoBkC,KAAKlC,mBAAoBJ,gBAAiBG,EAAWO,eAAgB4B,KAAK5B,eAAgBI,UAAWwB,KAAKzB,MAAMC,UAAWkD,KAAK,6FAA6FC,QAAQ,uBAA0B,SAI5T,OA3JClE,CAAkBmE,EAAAA,U","sources":["../node_modules/react-bootstrap/esm/types.js","../node_modules/react-bootstrap/esm/DropdownButton.js","Layouts/Main/PublishCommonComponents/EmbedCode.js"],"sourcesContent":["import PropTypes from 'prop-types';\nconst alignDirection = PropTypes.oneOf(['start', 'end']);\nexport const alignPropType = PropTypes.oneOfType([alignDirection, PropTypes.shape({\n  sm: alignDirection\n}), PropTypes.shape({\n  md: alignDirection\n}), PropTypes.shape({\n  lg: alignDirection\n}), PropTypes.shape({\n  xl: alignDirection\n}), PropTypes.shape({\n  xxl: alignDirection\n}), PropTypes.object]);","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport DropdownToggle from './DropdownToggle';\nimport DropdownMenu from './DropdownMenu';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string}\n   */\n  id: PropTypes.string,\n  /** An `href` passed to the Toggle component */\n  href: PropTypes.string,\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n  /**\n   * Menu color variant.\n   *\n   * Omitting this will use the default light color.\n   */\n  menuVariant: PropTypes.oneOf(['dark']),\n  /**\n   * Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer to\n   * Popper.js's flip [docs](https://popper.js.org/docs/v2/modifiers/flip/).\n   *\n   */\n  flip: PropTypes.bool,\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n  /** @ignore */\n  variant: PropTypes.string,\n  /** @ignore */\n  size: PropTypes.string\n};\n\n/**\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of\n * [`Dropdown`'s props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._ Only\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\n * along with menu-related props are passed to the `Dropdown.Menu`\n */\nconst DropdownButton = /*#__PURE__*/React.forwardRef(({\n  title,\n  children,\n  bsPrefix,\n  rootCloseEvent,\n  variant,\n  size,\n  menuRole,\n  renderMenuOnMount,\n  disabled,\n  href,\n  id,\n  menuVariant,\n  flip,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  children: [/*#__PURE__*/_jsx(DropdownToggle, {\n    id: id,\n    href: href,\n    size: size,\n    variant: variant,\n    disabled: disabled,\n    childBsPrefix: bsPrefix,\n    children: title\n  }), /*#__PURE__*/_jsx(DropdownMenu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    variant: menuVariant,\n    flip: flip,\n    children: children\n  })]\n}));\nDropdownButton.displayName = 'DropdownButton';\nDropdownButton.propTypes = propTypes;\nexport default DropdownButton;","import React, { Component, Suspense } from 'react';\nimport { toast } from \"react-toastify\";\nimport { Tab, Nav, OverlayTrigger, Tooltip, Dropdown, InputGroup, DropdownButton, Form } from 'react-bootstrap';\nimport { COPY_TO_CLIPBOARD } from '../../../Services/Utils/utils';\nimport { EmbedURL, EMBED_MIN } from '../../../Services/Api'\nimport { mailSendRequest } from '../../../Services/Actions/mailActions'\nconst ShareEmbedModal = React.lazy(() => import('./ShareEmbedModal'));\n\nclass EmbedCode extends Component {\n    constructor() {\n        super();\n        this.state = { showModal: false, codeCopied: false, isLoading: false, widthSign: \"%\", heightSign: \"%\", width: \"100\", height: \"100\", id: \"#embedCode_\" };\n    }\n    shareEmbedModal = (id) => event => this.setState({\n        showModal: true,\n        id: id\n    })\n    shareEmbedCallback = (shareEmbedEvent) => {\n        this.setState({\n            showModal: shareEmbedEvent\n        })\n    }\n\n    codeCopy = (id) => {\n        this.setState({\n            codeCopied: true\n        })\n        setTimeout(() => {\n            this.setState({\n                codeCopied: false\n            })\n        }, 1500);\n        COPY_TO_CLIPBOARD(id);\n    }\n    onClickToShare = (mailId) => event => {\n        var self = this;\n        const { id } = this.state\n        this.setState({ isLoading: true })\n        if (mailId && String(mailId).length > 0) {\n            mailSendRequest({ htmlCode: document.querySelector(id ? id : \"#embedCode_\").innerText, email: mailId, type: 3 }).then((response) => {\n                toast.success(\"Tagbox widget code successfully sent.\")\n                self.setState({ showModal: false, isLoading: false })\n            })\n\n        }\n        else {\n            toast.error(\"Please enter email id.\")\n        }\n    }\n    onChangeWidth = event => {\n        if (event.target.value && parseInt(event.target.value) > 0) this.setState({ width: event.target.value > 100 ? 100 : event.target.value })\n    }\n    onChangeHeight = event => {\n        if (event.target.value && parseInt(event.target.value) > 0) this.setState({ height: event.target.value > 100 ? 100 : event.target.value })\n    }\n    onClickToWidthSign = (value) => event => {\n        this.setState({ widthSign: value })\n    }\n    onClickToHeightSign = (value) => event => {\n        this.setState({ heightSign: value })\n    }\n    render() {\n        const { codeCopied, showModal, width, height, widthSign, heightSign } = this.state\n        const { copyText, data } = this.props\n\n        return <div className=\"embed_code\">\n            <div className=\"mb-5\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <InputGroup>\n                            <InputGroup.Text>Width</InputGroup.Text>\n                            <Form.Control type=\"number\" defaultValue={width} value={width} onChange={this.onChangeWidth} />\n                            <DropdownButton align=\"end\" variant=\"outline-secondary\" title={widthSign}>\n                                <Dropdown.Item href=\"#\" onClick={this.onClickToWidthSign(\"%\")}>Percent (%)</Dropdown.Item>\n                                <Dropdown.Item href=\"#\" onClick={this.onClickToWidthSign(\"px\")}>Pixel (PX)</Dropdown.Item>\n                                <Dropdown.Item href=\"#\" onClick={this.onClickToWidthSign(\"vw\")} >Viewport Width (VW)</Dropdown.Item>\n                            </DropdownButton>\n                        </InputGroup>\n                    </div>\n                    <div className=\"col\">\n                        <InputGroup>\n                            <InputGroup.Text>Height</InputGroup.Text>\n                            <Form.Control type=\"number\" defaultValue={height} value={height} onChange={this.onChangeHeight} />\n                            <DropdownButton align=\"end\" variant=\"outline-secondary\" title={heightSign}>\n                                <Dropdown.Item href=\"#\" onClick={this.onClickToHeightSign(\"%\")}>Percent (%)</Dropdown.Item>\n                                <Dropdown.Item href=\"#\" onClick={this.onClickToHeightSign(\"px\")}>Pixel (PX)</Dropdown.Item>\n                                <Dropdown.Item href=\"#\" onClick={this.onClickToHeightSign(\"vw\")}>Viewport Height (VH)</Dropdown.Item>\n                            </DropdownButton>\n                        </InputGroup>\n                    </div>\n                </div>\n            </div>\n            <h5 className=\"mb-3 h6\">{copyText}</h5>\n            <div className=\"p-3 bg-light rounded-1 mb-5\">\n                <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"liteCodeEmbed_\">\n                    <Nav variant=\"underline\" className=\"mb-3 border-bottom\">\n                        <Nav.Item className=\"me-4\">\n                            <Nav.Link eventKey=\"liteCodeEmbed_\" className=\"px-0 fw-semibold\">\n                                Lite Code\n                            </Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item className=\"\">\n                            <Nav.Link eventKey=\"iframeCodeEmbed_\" className=\"px-0 fw-semibold\">\n                                Iframe\n                            </Nav.Link>\n                        </Nav.Item>\n                    </Nav>\n                    <Tab.Content>\n                        <Tab.Pane eventKey=\"liteCodeEmbed_\">\n                            <div className=\"mb-2 mb-xl-3 position-relative\">\n                                <code className=\"form-control textarea-min-row-4 p-lg-4\" id=\"embedCode_\" onClick={() => { this.codeCopy('embedCode_') }} style={{ wordBreak: 'break-all' }}>\n                                    &lt;div class=\"taggbox\" data-widget-id=\"{data && Object.keys(data).length > 0 ? data.wallId : null}\" ugcSuite=\"1\" style=\"width:{width}{widthSign};height:{height}{heightSign};\"&gt;&lt;/div&gt;\n                                    &lt;script src=\"{EMBED_MIN}\" type=\"text/javascript\"&gt;&lt;/script&gt;\n                                </code>\n                                <div className=\"emebed_action position-absolute end-0 bottom-0 pe-2 pb-2\">\n                                    <OverlayTrigger placement=\"top\" overlay={<Tooltip>{!codeCopied ? 'Copy Code' : 'Code Copied'}</Tooltip>}>\n                                        <button type=\"button\" className=\"btn btn-link text-decoration-none text-gray-500 p-0 me-2\" onClick={() => { this.codeCopy('embedCode_') }}>\n                                            {!codeCopied ?\n                                                <i className=\"ri-file-copy-fill\"></i>\n                                                :\n                                                <i className=\"ri-check-line\" style={{ color: '#6AC259' }}></i>\n                                            }\n                                        </button>\n                                    </OverlayTrigger>\n                                    <OverlayTrigger placement=\"top\" overlay={<Tooltip>Share Code</Tooltip>}>\n                                        <button className=\"btn btn-link text-decoration-none text-gray-500 p-0 GetShareCode\" type=\"button\" onClick={this.shareEmbedModal('#embedCode_')}>\n                                            <i className=\"ri-mail-fill\"></i>\n                                        </button>\n                                    </OverlayTrigger>\n                                </div>\n                            </div>\n                        </Tab.Pane>\n                        <Tab.Pane eventKey=\"iframeCodeEmbed_\">\n                            <div className=\"mb-2 mb-xl-3 position-relative\">\n                                <code className=\"form-control textarea-min-row-4 p-lg-4\" id=\"embedCodeIframe_\" onClick={() => { this.codeCopy('embedCodeIframe_') }}>\n                                    &lt;iframe src=\"{EmbedURL}{data && Object.keys(data).length > 0 ? data.wallId : null}\" style=\"width:100%;height:600px;border:none;\"&gt;&lt;/iframe&gt;\n                                </code>\n                                <div className=\"emebed_action position-absolute end-0 bottom-0 pe-2 pb-2\">\n                                    <OverlayTrigger placement=\"top\" overlay={<Tooltip>{!codeCopied ? 'Copy Code' : 'Code Copied'}</Tooltip>}>\n                                        <button type=\"button\" className=\"btn btn-link text-decoration-none text-gray-500 p-0 me-2\" onClick={() => { this.codeCopy('embedCodeIframe_') }}>\n                                            {!codeCopied ?\n                                                <i className=\"ri-file-copy-fill\"></i>\n                                                :\n                                                <i className=\"ri-check-line\" style={{ color: '#6AC259' }}></i>\n                                            }\n                                        </button>\n                                    </OverlayTrigger>\n                                    <OverlayTrigger placement=\"top\" overlay={<Tooltip>Share Code</Tooltip>}>\n                                        <button className=\"btn btn-link text-decoration-none text-gray-500 p-0 GetShareCode\" type=\"button\" onClick={this.shareEmbedModal('#embedCodeIframe_')}>\n                                            <i className=\"ri-mail-fill\"></i>\n                                        </button>\n                                    </OverlayTrigger>\n                                </div>\n                            </div>\n                        </Tab.Pane>\n                    </Tab.Content>\n                </Tab.Container>\n            </div>\n            <Suspense fallback={<></>}>\n                {showModal ? <ShareEmbedModal shareEmbedCallback={this.shareEmbedCallback} shareEmbedModal={showModal} onClickToShare={this.onClickToShare} isLoading={this.state.isLoading} text=\"Share this embed code with your team. Enter the email Id to send the code directly to them\" heading=\"Send code by email\" /> : null}\n            </Suspense>\n        </div>\n\n    }\n}\n\nexport default EmbedCode;"],"names":["alignDirection","PropTypes","alignPropType","sm","md","lg","xl","xxl","propTypes","id","href","onClick","title","disabled","align","menuRole","renderMenuOnMount","rootCloseEvent","menuVariant","flip","bsPrefix","variant","size","DropdownButton","React","ref","children","props","_jsxs","Dropdown","_jsx","DropdownToggle","childBsPrefix","DropdownMenu","role","renderOnMount","displayName","ShareEmbedModal","EmbedCode","shareEmbedModal","event","setState","showModal","shareEmbedCallback","shareEmbedEvent","codeCopy","codeCopied","setTimeout","COPY_TO_CLIPBOARD","onClickToShare","mailId","self","state","isLoading","String","length","mailSendRequest","htmlCode","document","querySelector","innerText","email","type","then","response","toast","onChangeWidth","target","value","parseInt","width","onChangeHeight","height","onClickToWidthSign","widthSign","onClickToHeightSign","heightSign","this","copyText","data","className","InputGroup","Form","defaultValue","onChange","Tab","defaultActiveKey","Nav","eventKey","style","wordBreak","Object","keys","wallId","EMBED_MIN","OverlayTrigger","placement","overlay","Tooltip","color","EmbedURL","Suspense","fallback","text","heading","Component"],"sourceRoot":""}