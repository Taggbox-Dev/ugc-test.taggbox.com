{"version":3,"file":"static/js/5706.258445da.chunk.js","mappings":"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","sources":["Layouts/Main/MyAssets/AddAssetsModal/Compontnets/Elements/NetworksSkeleton.js","Layouts/Main/MyAssets/AddAssetsModal/Compontnets/Elements/Networks.js","Layouts/Main/MyAssets/AddAssetsModal/Compontnets/UploadAssets.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst numbers = Array.from({length: 14}, (_, i) => i + 1);\r\nconst NetworksSkeleton = () => {\r\n    return  <div className=\"\">\r\n                {numbers.map((number, index) => (\r\n                <div key={index} className=\"w-100 mb-1 fs-7 fw-medium text-start d-flex align-items-center px-3 py-2\">\r\n                    <span className=\"sk_rect h-24px w-24px me-2\"></span>\r\n                    <p className=\"sk_line sk_line_100 sk_line_height_12 my-1 w-75\"></p>\r\n                </div>\r\n                ))}\r\n            </div>\r\n\r\n}\r\n\r\nexport default NetworksSkeleton;\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { baseUrl } from '../../../../../../Assets/AssetsHelper';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport NetworksSkeleton from './NetworksSkeleton';\r\nimport { GET_NETWORK_ICON, GET_NETWORK_NAME } from '../../../../../../Services/Utils/utils';\r\nclass Networks extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            textValue: '',\r\n            networkList: props.networkList,\r\n            networkListLoading:false,\r\n            manualUpload:true\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        const { networkList} = this.state;\r\n        if(networkList && networkList.length > 0 ){\r\n            this.setState({ networkListLoading: false })\r\n        }else{\r\n            this.setState({ networkListLoading: true })\r\n        }\r\n    }\r\n\r\n    filterNetworkList = (e) => {\r\n        let filteredList = this.filterList(e.target.value);\r\n        this.setState({ textValue: e.target.value, networkList: filteredList });\r\n    }\r\n\r\n    filterList = (value) => {\r\n        const { networkList } = this.props;\r\n        if (networkList.length > 0) {\r\n            return networkList.filter(network => network.name.toLowerCase().match(value.toLowerCase()));\r\n        }\r\n        return [];\r\n    }\r\n\r\n    uploadType = (uploadType, network) => {\r\n        this.props.uploadTypeCallback(uploadType, network)\r\n\r\n        this.setState({\r\n            manualUpload:uploadType == 'uploadAssets' ? true : false\r\n        })\r\n    };\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (this.state.networkList != nextProps.networkList) {\r\n            this.setState({ networkList: nextProps.networkList,networkListLoading: false  })\r\n        }else{\r\n            this.setState({ networkListLoading: this.props.networkList > 0 ? true : false})\r\n        }\r\n    }\r\n    render() {\r\n        const { selectedNetworkId } = this.props;\r\n        const { networkList, textValue, networkListLoading, manualUpload } = this.state;\r\n        return   <div className=\"card mb-xxl-4 mb-5 h-100\">\r\n                    <div className=\"card-body\">\r\n                        <h6 className=\"fs-7 mb-3\">Choose Network</h6>\r\n                        <div className=\"mb-4\">\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Search your network...\" value={textValue} onChange={(e) => this.filterNetworkList(e)} />\r\n                        </div>\r\n                        <button type=\"button\" className={`btn btn-active-light border border-dashed py-3 w-100 mb-2 fs-7 fw-medium d-flex block-center ${manualUpload ? 'bg-light':''}`} onClick={() => this.uploadType(\"uploadAssets\", null)}>\r\n                            <i className=\"ri-upload-cloud-fill icon-3 me-2 text-gray-600\"></i>\r\n                            Browse From Device\r\n                        </button>\r\n                        <div className=\"addSourceNetworkList\">\r\n                        <PerfectScrollbar className=\"pe-2\">\r\n                            {!networkListLoading ? \r\n                                networkList && networkList.length > 0 ? networkList.map((network, index) => {\r\n                                    return <button key={network.id} type=\"button\" data-id={network.id} className={`btn btn-link text-decoration-none w-100 btn-active-light btn-sm mb-1 fs-7 fw-medium text-start d-flex align-items-center ${selectedNetworkId === network.id ? 'bg-light' : ''}`} onClick={() => this.uploadType(network.id === 29 ? 'onsite-upload' : 'byNetwork', network)}>\r\n                                        <span className=\"symbol symbol-24 me-2 bg-light\">\r\n                                            <img className=\"object-center-contain\" src={baseUrl(`media/icons/social-icons-square/${GET_NETWORK_ICON(network.id)}.svg`)} alt={GET_NETWORK_NAME(network.id)} height={30} width={30} />\r\n                                        </span>\r\n                                        {network.id === 29 ? `SnapUp` : network.name}\r\n                                    </button>\r\n                                }) :<span className=\"py-5 text-center d-block fs-8 fw-medium text-gray-500\">No Network Found</span>: <NetworksSkeleton />\r\n                            }\r\n                            </PerfectScrollbar>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        networkData: state.networks.networkData\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Networks);","\r\nimport React, { Component, Suspense } from 'react';\r\nimport Swal from 'sweetalert2';\r\nimport { connect } from 'react-redux';\r\nimport Networks from './Elements/Networks';\r\n\r\n\r\n\r\nconst NeedSupport = React.lazy(() => import('../../../CommonComponents/NeedSupport'));\r\nconst AddFeedByNetwork = React.lazy(() => import('./Elements/AddFeedByNetwork'));\r\nconst ChooseCollection = React.lazy(() => import('./Elements/ChooseCollection'));\r\nconst AssetsUploader = React.lazy(() => import('./Elements/AssetsUploader'));\r\nconst OnsiteUpload = React.lazy(() => import('../../../Feeds/OnsiteUpload/OnsiteUpload'));\r\n\r\n\r\nclass UploadAssets extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            uploadTypeSec: 'uploadAssets',\r\n            filterTabs: [],\r\n            selectedNetwork: null,\r\n            selectedCollection: null\r\n        };\r\n    }\r\n\r\n    uploadType = (uploadTypeVal, network) => {\r\n        this.setState({\r\n            uploadTypeSec: uploadTypeVal,\r\n            filterTabs: network ? network.networkTab : null,\r\n            selectedNetwork: network\r\n        })\r\n    }\r\n    getAssets = () => {\r\n        this.props.getAssetsCallback()\r\n    };\r\n    onUppyResetAndClose = event => {\r\n        const { uploadedData } = this.props\r\n        if (uploadedData && uploadedData.length > 0) {\r\n            const { onClearUPloadObject, uppyPostEdit } = this.props\r\n            uppyPostEdit.cancelAll()\r\n            uppyPostEdit.removeFile()\r\n            onClearUPloadObject([])\r\n        } else {\r\n            const { onClearUPloadObject, uppyPostEdit } = this.props\r\n            uppyPostEdit.cancelAll()\r\n            uppyPostEdit.removeFile()\r\n            onClearUPloadObject([])\r\n            this.props.editMediaHandleCallback(false)\r\n        }\r\n\r\n    }\r\n    onCancelUpload = event => {\r\n        const { uploadedData } = this.props\r\n        var self = this;\r\n        if (uploadedData && uploadedData.length > 0) {\r\n            Swal.fire({\r\n                title: 'Are you sure?',\r\n                text: \"You want to  discard changes!\",\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                confirmButtonText: 'Yes, discard changes!'\r\n            }).then((result) => {\r\n                if (result.isConfirmed) {\r\n                    const { onClearUPloadObject, uppyPostEdit } = self.props\r\n                    uppyPostEdit.cancelAll()\r\n                    uppyPostEdit.removeFile()\r\n                    onClearUPloadObject([])\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            this.props.editMediaHandleCallback(false)\r\n        }\r\n    }\r\n    onUGCUploadCollection = (selectedCollection) => {\r\n        this.setState({ selectedCollection })\r\n    }\r\n\r\n    render() {\r\n        const { uploadTypeSec, filterTabs, selectedNetwork, selectedCollection } = this.state;\r\n        const { uploadedData, collectionError, networkList } = this.props\r\n        return <div className=\"container\">\r\n            <div className=\"addSource d-flex flex-column flex-lg-row w-100 pt-5\">\r\n                <div className=\"addSourceNetwork d-flex flex-column flex-shrink-0 pe-lg-4\">\r\n                    <Networks uploadTypeCallback={this.uploadType} networkList={networkList} selectedNetworkId={selectedNetwork ? selectedNetwork.id : null} />\r\n                </div>\r\n                <div className=\"flex-grow-1 w-100 mb-5 card\">\r\n                    <div className=\"card-body\">\r\n                        <div className=\"\">\r\n                            <h6 className=\"fs-7 mb-3\">Select or create a collection where you wish to upload your assets.</h6>\r\n                            <div className=\"mb-3\">\r\n                                <Suspense fallback={<></>}>\r\n                                    <ChooseCollection {...this.props} selectedCollection={selectedCollection} isMulti={true} />\r\n                                </Suspense>\r\n                                {collectionError ? <span className=\"text-danger\">Please select collection.</span> : null}\r\n                            </div>\r\n                            {uploadTypeSec === 'uploadAssets' ?\r\n                                <Suspense fallback={<></>}>\r\n                                    <AssetsUploader {...this.props} uppyPostEdit={this.props.uppyPostEdit} />\r\n                                </Suspense>\r\n                                : uploadTypeSec === 'onsite-upload' ?\r\n                                    <Suspense fallback={<></>}>\r\n                                        <OnsiteUpload onBack={() => this.uploadType(\"uploadAssets\", null)} {...this.props} onUGCUploadCollection={this.onUGCUploadCollection} />\r\n                                    </Suspense>\r\n                                    : uploadTypeSec === 'byNetwork' ?\r\n                                        <Suspense fallback={<></>}>\r\n                                            <AddFeedByNetwork filterTabs={filterTabs} selectedNetwork={selectedNetwork} onBack={() => this.uploadType(\"uploadAssets\", null)} {...this.props} />\r\n                                        </Suspense>\r\n                                        : null\r\n                            }\r\n                        </div>\r\n                        {uploadTypeSec === 'uploadAssets' ? <div className=\"d-flex flex-wrap align-items-center justify-content-between\">\r\n                            <Suspense fallback={<></>}>\r\n                                <NeedSupport content={'Need Help'} supportUrl={'#'} videoUrl={'#'} changeText={true} />\r\n                            </Suspense>\r\n                            <div className=\"my-1 d-flex align-items-center justify-content-end flex-wrap\">\r\n                                <button type=\"button\" className=\"btn btn-secondary me-3\" onClick={this.onCancelUpload}>Cancel</button>\r\n                                <button type=\"button\" id=\"resetUppyUpload\" className=\"btn btn-secondary me-3\" onClick={this.onUppyResetAndClose} hidden>Uppy Reset</button>\r\n                                <button type=\"button\" className={`btn btn-primary ${uploadedData && uploadedData.length > 0 ? `` : `disabled`}`} onClick={() => this.getAssets()}>Fetch Assets {uploadedData && uploadedData.length > 0 ? `(${uploadedData.length})` : ``}</button>\r\n                            </div>\r\n                        </div> : null}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        networkList: state.addFeed.networkList\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(UploadAssets);\r\n"],"names":["numbers","Array","from","length","_","i","_jsx","className","children","map","number","index","_jsxs","Networks","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","filterNetworkList","e","filteredList","filterList","target","value","setState","textValue","networkList","filter","network","name","toLowerCase","match","uploadType","uploadTypeCallback","manualUpload","state","networkListLoading","_createClass","key","this","nextProps","_this2","selectedNetworkId","_this$state","type","placeholder","onChange","concat","onClick","PerfectScrollbar","NetworksSkeleton","id","src","baseUrl","GET_NETWORK_ICON","alt","GET_NETWORK_NAME","height","width","Component","connect","networkData","networks","NeedSupport","React","AddFeedByNetwork","ChooseCollection","AssetsUploader","OnsiteUpload","UploadAssets","uploadTypeVal","uploadTypeSec","filterTabs","networkTab","selectedNetwork","getAssets","getAssetsCallback","onUppyResetAndClose","event","uploadedData","_this$props","onClearUPloadObject","uppyPostEdit","cancelAll","removeFile","_this$props2","editMediaHandleCallback","onCancelUpload","self","_assertThisInitialized","Swal","title","text","icon","showCancelButton","confirmButtonText","then","result","isConfirmed","_self$props","onUGCUploadCollection","selectedCollection","_this$props3","collectionError","Suspense","fallback","_Fragment","_objectSpread","isMulti","onBack","content","supportUrl","videoUrl","changeText","hidden","addFeed"],"sourceRoot":""}