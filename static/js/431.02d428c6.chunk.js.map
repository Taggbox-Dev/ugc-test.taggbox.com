{"version":3,"file":"static/js/431.02d428c6.chunk.js","mappings":"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","sources":["Layouts/Main/MyAssets/GetRightsModal/Elements/GetRightsSteps/GetRightsSocialAccount.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport Swal from 'sweetalert2';\nimport { Cookies } from \"react-cookie\";\nimport { HOST_DOMAIN, INSTA_CLIENT_ID } from '../../../../../../Services/Api'\nimport { baseUrl } from \"../../../../../../Assets/AssetsHelper\";\nimport { ToggleButtonGroup, ToggleButton, Form } from \"react-bootstrap\";\nimport { GET_NETWORK_ICON, CAPITALIZE_FIRST_LETTER, SafariStatus } from '../../../../../../Services/Utils/utils'\nimport { flickrConnect, tumblerConnect } from '../../../../SocialLogin/auth'\nimport { getFbAuthUrl, getYammerAuthUrl, getVimeoAuthUrl, tiktokAuthentication } from '../../../../../../Layouts/Main/AuthCallback/AuthSocialAcc'\nimport { addFacebookAccount, addInstaAccount } from '../../../../../../Layouts/Main/AuthCallback/connectSocialAcc'\nimport { addUserRights } from '../../../../../../Services/Actions/addFeedAction'\nimport { getRightsInstagramDetails, getFacebookDetails } from '../../../../../../Services/Actions/publishActions'\nimport { getTwitterCode } from '../../../../../../Services/Actions/loginActions'\nimport { toast } from \"react-toastify\";\nconst channel = SafariStatus ? window : new BroadcastChannel('connect');\nconst cookies = new Cookies();\nclass GetRightsSocialAccount extends Component {\n    state = {\n        connected: null,\n        showConfirm: false,\n        rightsVia: ''\n    }\n    componentDidMount() {\n        channel.addEventListener(\"message\", this.readAuthenticationCode);\n        this.onLoadSocialAccount()\n    }\n    onLoadSocialAccount = () => {\n        try {\n            const { modalAssetData } = this.props\n            if (cookies.get(`ugcRights${modalAssetData.networkId}`)) {\n                const accountsData = cookies.get(`ugcRights${modalAssetData.networkId}`)\n                if (accountsData && accountsData.length > 0) {\n                    this.setState({ access_token: \"\", socialData: null, accountsData }, () => this.props.onUpdateData(String(GET_NETWORK_ICON(modalAssetData.networkId)).toLowerCase(), accountsData))\n                }\n\n            }\n        }\n        catch (ex) {\n\n        }\n    }\n\n    readAuthenticationCode = (event) => {\n        const response = JSON.parse(event.data);\n        const { data, networkId, type } = response;\n\n        var self = this\n        if (type == \"get-rights\") {\n            const responseToken = JSON.parse(event.data);\n            const { modalAssetData } = this.props\n            if (modalAssetData.networkId == 2 || modalAssetData.networkId == 18) {\n                addInstaAccount(data, (data) => {\n                    getRightsInstagramDetails({ access_token: data.token }).then((response) => {\n\n                        const { data } = response\n                        var accountsData = [];\n                        if (data && Object.keys(data).length > 0) {\n                            accountsData.push({ id: data.id, name: data.username, picture: baseUrl(`media/icons/social-icons/${GET_NETWORK_ICON(modalAssetData.networkId)}.svg`) })\n                        }\n                        cookies.set(`ugcRights${modalAssetData.networkId}`, JSON.stringify(accountsData), { path: '/' })\n                        self.setState({ access_token: data.token, socialData: response.data, accountsData }, () => this.props.onUpdateData(\"instagram\", accountsData))\n                    }).catch(ex=>toast.error(\"Api failed\"))\n                })\n            }\n            else if (modalAssetData.networkId == 3) {\n                addFacebookAccount(data, networkId, (data) => {\n                    getFacebookDetails({ access_token: data.token }).then((response) => {\n                        const { pages } = response.data\n                        var accountsData = [];\n                        if (pages && pages.length > 0) {\n                            pages.map((item) => {\n                                accountsData.push({ id: item.id, name: item.name, access_token: item.access_token, picture: baseUrl(`media/icons/social-icons/${GET_NETWORK_ICON(modalAssetData.networkId)}.svg`) })\n                            })\n                        }\n                        cookies.set(`ugcRights${modalAssetData.networkId}`, JSON.stringify(accountsData), { path: '/' })\n                        self.setState({ access_token: data.token, socialData: response.data, accountsData }, () => this.props.onUpdateData(\"facebook\", accountsData))\n                    }).catch(ex=>toast.error(\"Api failed\"))\n                })\n            }\n            else if (modalAssetData.networkId == 1) {\n                var accountsData = [];\n                if (data && Object.keys(data).length > 0) {\n                    accountsData.push({ id: data.id_str, name: data.name, picture: data.picture ? data.picture : baseUrl(`media/icons/social-icons/${GET_NETWORK_ICON(modalAssetData.networkId)}.svg`) })\n                }\n                cookies.set(`ugcRights${modalAssetData.networkId}`, JSON.stringify(accountsData), { path: '/' })\n                self.setState({ access_token: localStorage.getItem(\"tokenSecret\"), socialData: data, accountsData }, () => this.props.onUpdateData(\"twitter\", accountsData))\n            }\n            else if (modalAssetData.networkId == 28) {\n                var accountsData = [];\n                if (data && Object.keys(data).length > 0) {\n                    accountsData.push({ id: data.display_name, name: data.display_name, picture: data.avatar ? data.avatar : baseUrl(`media/icons/social-icons/${GET_NETWORK_ICON(modalAssetData.networkId)}.svg`) })\n                }\n                cookies.set(`ugcRights${modalAssetData.networkId}`, JSON.stringify(accountsData), { path: '/' })\n                self.setState({ access_token: data.client_key, socialData: data, accountsData }, () => this.props.onUpdateData(\"tiktok\", accountsData))\n            }\n            else {\n                addUserRights(data, networkId, (data) => {\n\n                })\n            }\n\n        }\n    }\n\n\n    componentWillUnmount() {\n        channel.removeEventListener(\"message\", this.readAuthenticationCode);\n    }\n    handleYes = event => {\n        this.setState({ showConfirm: true })\n    }\n    handleNo = event => {\n        this.setState({ showConfirm: true })\n    }\n    onClickSocialConnect = (data) => event => {\n        if (data && Object.keys(data).length > 0) {\n            Swal.fire({\n                imageUrl: baseUrl(`media/icons/social-icons-square/${GET_NETWORK_ICON(data.networkId)}.svg`),\n                imageHeight: 40,\n                imageWidth: 40,\n                title: `<strong>${CAPITALIZE_FIRST_LETTER(GET_NETWORK_ICON(data.networkId))}</strong>`,\n                html: `Add an account to continue`,\n                showCloseButton: true,\n                showCancelButton: false,\n                focusConfirm: true,\n                confirmButtonText: `Continue with ${CAPITALIZE_FIRST_LETTER(GET_NETWORK_ICON(data.networkId))}`,\n                confirmButtonAriaLabel: `Continue with ${CAPITALIZE_FIRST_LETTER(GET_NETWORK_ICON(data.networkId))}`,\n            }).then((result) => {\n                if (result.isConfirmed) {\n                    localStorage.setItem(\"networkId\", data.networkId);\n                    localStorage.setItem(\"connectionType\", \"get-rights\");\n                    switch (data.networkId) {\n                        case 1:\n                            getTwitterCode();\n                            break;\n                        case 6:\n                            flickrConnect(6);\n                            break;\n                        case 21:\n                            getYammerAuthUrl()\n                            break;\n                        case 11:\n                            tumblerConnect(11);\n                            break;\n                        case 8:\n                            getVimeoAuthUrl()\n                            break;\n                        case 3:\n                            getFbAuthUrl(3);\n                            break;\n                        case 28:\n                            tiktokAuthentication();\n                            break;\n\n                        case 2:\n                            const url1 = `https://api.instagram.com/oauth/authorize?client_id=${INSTA_CLIENT_ID}&redirect_uri=${HOST_DOMAIN}/instagram/feeds/authCallback/&scope=user_profile,user_media&response_type=code`\n                            window.open(url1, '_blank', \"width=786,height=786\");\n                            break;\n                        case 18:\n                            const url = `https://api.instagram.com/oauth/authorize?client_id=${INSTA_CLIENT_ID}&redirect_uri=${HOST_DOMAIN}/instagram/feeds/authCallback/&scope=user_profile,user_media&response_type=code`\n                            window.open(url, '_blank', \"width=786,height=786\");\n                            break;\n                        // case 18:\n                        //     getFbAuthUrl(18)\n                        //     break;\n                        default:\n                            break;\n                    }\n                }\n            });\n        }\n    }\n    handleChangeOption = event => {\n        this.setState({\n            rightsVia: event\n        })\n    }\n\n    render() {\n        const { modalAssetData, connectedAccount, rightsViaOption, rightsVia } = this.props;\n        const isInstagram = modalAssetData && Object.keys(modalAssetData).length > 0 && (modalAssetData.networkId == 2 || modalAssetData.networkId == 18) ? true : false\n        return <div className=\"p-lg-6 p-3\">\n            <div className=\"m-auto\">\n                <h3 className=\"mb-1 fs-7 pt-1\">Select the mode for Right Request</h3>\n                <p>Tagbox offers {isInstagram ? `two` : `one`} distinct modes to request rights. {isInstagram ? `Comment Request and DM Request` : `DM Request`}. </p>\n                <div key={`inline-radio`} className=\"mb-3 d-flex flex-column\">\n\n                    <ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue={rightsVia} className=\"flex-column\" onChange={rightsViaOption}>\n                        {isInstagram ? <ToggleButton variant=\"outline-secondary\" id=\"rightsVia-2\" value={'viaComments'} className={`mb-2 d-flex bg-transparent justify-content-between py-4 ${rightsVia == 'viaComments' ? 'border-success' : ''}`}>\n                            <div className=\"d-flex me-3 fw-normal\">\n                                <i className=\"ri-message-line icon-3 mt-1 me-2 fw-normal\"></i>\n                                <span className=\"text-start\">\n                                    <p className=\"h6 mb-0 fw-medium\">Comment Request</p>\n                                    <span className=\"fs-10\">Request rights by commenting under the post you desire the rights for! </span>\n                                </span>\n                            </div>\n                            <Form.Check.Input type={'radio'} name={'rights-via'} className=\"d-none\" />\n                            <span className=\"w-20px\">\n                                {rightsVia == 'viaComments' ? <i className=\"ri-checkbox-circle-fill icon-5 me-0 text-success\"></i> : null}\n                            </span>\n                        </ToggleButton> : null}\n                        <ToggleButton variant=\"outline-secondary\" id=\"rightsVia-3\" value={'viaDM'} className={`mb-2 d-flex bg-transparent justify-content-between py-4 ${rightsVia == 'viaDM' ? 'border-success' : ''}`}>\n                            <div className=\"d-flex me-3 fw-normal\">\n                                <i className=\"ri-discuss-line icon-3 mt-1 me-2 fw-normal\"></i>\n                                <span className=\"text-start\">\n                                    <p className=\"h6 mb-0 fw-medium\">DM Request</p>\n                                    <span className=\"fs-10\">Send a Rights request directly into the DM of the creators! </span>\n                                </span>\n                            </div>\n                            <Form.Check.Input type={'radio'} name={'rights-via'} className=\"d-none\" />\n                            <span className=\"w-20px\">\n                                {rightsVia == 'viaDM' ? <i className=\"ri-checkbox-circle-fill icon-5 me-0 text-success\"></i> : null}\n                            </span>\n                        </ToggleButton>\n                    </ToggleButtonGroup>\n                </div>\n\n                {/* {connectedAccount && connectedAccount.data.length > 0 ?\n                    <>\n                        <h3 className=\"mb-2 fs-7 pt-1\">\n                            <span className=\"fw-medium\">Connect Account</span>\n                        </h3>\n                        <div className=\"mb-3\">\n                            <button type=\"button\" className=\"d-flex align-items-center rounded-1 mb-2 p-3 btn btn-outline-secondary w-100\">\n                                <div className=\"d-flex align-items-center flex-grow-1 w-75\">\n                                    <ProfileImage className={'symbol symbol-40 rounded-circle flex-shrink-0 me-2 overflow-hidden'}\n                                        imageSize={40}\n                                        symbolClass={'symbol-label text-light-alt fw-bolder text-uppercase fs-5'}\n                                        name={connectedAccount.data[0].name} profileUrl={''} networkId={modalAssetData.networkId} />\n                                    <div className=\"w-75 overflow-hidden\">\n                                        <span className=\"text-start fs-7 d-block fw-bolder text-dark text-ellipsis\">@{connectedAccount.data[0].name}</span>\n                                    </div>\n                                </div>\n                                <div className=\"d-flex\">\n                                    <span className=\"h-20px w-20px\">\n                                        <img className=\"object-center-cover\" src={baseUrl(`media/icons/social-icons/${connectedAccount.provider}.svg`)} height={20} width={20} alt={GET_NETWORK_NAME(connectedAccount.provider)} />\n                                    </span>\n                                </div>\n                            </button>\n                            <span className=\"fw-medium\">You are logged in with this account</span>\n                        </div>\n                        <div className=\"d-flex align-items-center w-75 mb-3 mx-auto\">\n                            <span className=\"border-bottom d-flex flex-grow-1\"></span>\n                            <span className=\"d-flex flex-shrink-0 mx-5 fs-6 fw-semibold text-gray-400\">Or</span>\n                            <span className=\"border-bottom d-flex flex-grow-1\"></span>\n                        </div>\n                    </> : null\n                }\n\n                {modalAssetData.networkId == 7 ?\n                    <SocialGoogleLogin onUpdateData={this.props.onUpdateData} />\n                    :\n                    <button type=\"button\" className=\"d-flex align-items-center rounded-1 mb-2 p-3 btn btn-outline-secondary w-100\" onClick={this.onClickSocialConnect(modalAssetData)}>\n                        <div className=\"d-flex align-items-center flex-grow-1 w-75\">\n                            <div className=\"symbol symbol-40 bg-light rounded-circle flex-shrink-0 me-2 overflow-hidden\"></div>\n                            <div className=\"w-75 overflow-hidden\">\n                                <span className=\"text-start fs-7 d-block fw-bolder text-ellipsis\">Add Account</span>\n                            </div>\n                        </div>\n                        {modalAssetData.networkId ?\n                            <div className=\"d-flex\">\n                                <span className=\"h-20px w-20px\">\n                                    <img className=\"object-center-cover\" src={baseUrl(`media/icons/social-icons/${GET_NETWORK_ICON(modalAssetData.networkId)}.svg`)} height={20} width={20} alt={GET_NETWORK_NAME(modalAssetData.networkId)} style={{ filter: 'grayscale(1)', opacity: '.5' }} />\n                                </span>\n                            </div>\n                            : null}\n                    </button>\n                } */}\n            </div>\n        </div>\n    }\n}\n\nexport default GetRightsSocialAccount;"],"names":["channel","SafariStatus","window","BroadcastChannel","cookies","Cookies","GetRightsSocialAccount","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","connected","showConfirm","rightsVia","onLoadSocialAccount","modalAssetData","props","get","networkId","accountsData","setState","access_token","socialData","onUpdateData","String","GET_NETWORK_ICON","toLowerCase","ex","readAuthenticationCode","event","response","JSON","parse","data","type","self","_assertThisInitialized","addInstaAccount","getRightsInstagramDetails","token","then","Object","keys","push","id","name","username","picture","baseUrl","set","stringify","path","catch","toast","addFacebookAccount","getFacebookDetails","pages","map","item","id_str","localStorage","getItem","display_name","avatar","client_key","addUserRights","handleYes","handleNo","onClickSocialConnect","Swal","imageUrl","imageHeight","imageWidth","title","CAPITALIZE_FIRST_LETTER","html","showCloseButton","showCancelButton","focusConfirm","confirmButtonText","confirmButtonAriaLabel","result","isConfirmed","setItem","getTwitterCode","flickrConnect","getYammerAuthUrl","tumblerConnect","getVimeoAuthUrl","getFbAuthUrl","tiktokAuthentication","url1","INSTA_CLIENT_ID","HOST_DOMAIN","open","url","handleChangeOption","_createClass","key","value","addEventListener","this","removeEventListener","_this$props","rightsViaOption","connectedAccount","isInstagram","_jsx","className","children","_jsxs","ToggleButtonGroup","defaultValue","onChange","ToggleButton","variant","Form","Component"],"sourceRoot":""}